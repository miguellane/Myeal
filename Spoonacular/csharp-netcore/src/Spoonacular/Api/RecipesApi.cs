/*
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Spoonacular.Client;
using Spoonacular.Model;

namespace Spoonacular.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecipesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Analyze a Recipe Search Query
        /// </summary>
        /// <remarks>
        /// Parse a recipe search query to find out its intention.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The recipe search query.</param>
        /// <returns>InlineResponse20018</returns>
        InlineResponse20018 AnalyzeARecipeSearchQuery(string q);

        /// <summary>
        /// Analyze a Recipe Search Query
        /// </summary>
        /// <remarks>
        /// Parse a recipe search query to find out its intention.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The recipe search query.</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        ApiResponse<InlineResponse20018> AnalyzeARecipeSearchQueryWithHttpInfo(string q);
        /// <summary>
        /// Analyze Recipe Instructions
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <returns>InlineResponse20016</returns>
        InlineResponse20016 AnalyzeRecipeInstructions(string? contentType = default(string?));

        /// <summary>
        /// Analyze Recipe Instructions
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        ApiResponse<InlineResponse20016> AnalyzeRecipeInstructionsWithHttpInfo(string? contentType = default(string?));
        /// <summary>
        /// Autocomplete Recipe Search
        /// </summary>
        /// <remarks>
        /// Autocomplete a partial input to suggest possible recipe names.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <returns>List&lt;InlineResponse2007&gt;</returns>
        List<InlineResponse2007> AutocompleteRecipeSearch(string? query = default(string?), int? number = default(int?));

        /// <summary>
        /// Autocomplete Recipe Search
        /// </summary>
        /// <remarks>
        /// Autocomplete a partial input to suggest possible recipe names.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2007&gt;</returns>
        ApiResponse<List<InlineResponse2007>> AutocompleteRecipeSearchWithHttpInfo(string? query = default(string?), int? number = default(int?));
        /// <summary>
        /// Classify Cuisine
        /// </summary>
        /// <remarks>
        /// Classify the recipe&#39;s cuisine.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 ClassifyCuisine(string? contentType = default(string?));

        /// <summary>
        /// Classify Cuisine
        /// </summary>
        /// <remarks>
        /// Classify the recipe&#39;s cuisine.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> ClassifyCuisineWithHttpInfo(string? contentType = default(string?));
        /// <summary>
        /// Convert Amounts
        /// </summary>
        /// <remarks>
        /// Convert amounts like \&quot;2 cups of flour to grams\&quot;.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientName">The ingredient which you want to convert.</param>
        /// <param name="sourceAmount">The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.</param>
        /// <param name="sourceUnit">The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="targetUnit">The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 ConvertAmounts(string ingredientName, decimal sourceAmount, string sourceUnit, string targetUnit);

        /// <summary>
        /// Convert Amounts
        /// </summary>
        /// <remarks>
        /// Convert amounts like \&quot;2 cups of flour to grams\&quot;.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientName">The ingredient which you want to convert.</param>
        /// <param name="sourceAmount">The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.</param>
        /// <param name="sourceUnit">The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="targetUnit">The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> ConvertAmountsWithHttpInfo(string ingredientName, decimal sourceAmount, string sourceUnit, string targetUnit);
        /// <summary>
        /// Create Recipe Card
        /// </summary>
        /// <remarks>
        /// Generate a recipe card for a recipe.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 CreateRecipeCard(string? contentType = default(string?));

        /// <summary>
        /// Create Recipe Card
        /// </summary>
        /// <remarks>
        /// Generate a recipe card for a recipe.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> CreateRecipeCardWithHttpInfo(string? contentType = default(string?));
        /// <summary>
        /// Equipment by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s equipment list as an image.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <returns>Object</returns>
        Object EquipmentByIDImage(decimal id);

        /// <summary>
        /// Equipment by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s equipment list as an image.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> EquipmentByIDImageWithHttpInfo(decimal id);
        /// <summary>
        /// Extract Recipe from Website
        /// </summary>
        /// <remarks>
        /// This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The URL of the recipe page.</param>
        /// <param name="forceExtraction">If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)</param>
        /// <param name="analyze">If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients. (optional, default to false)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 ExtractRecipeFromWebsite(string url, bool? forceExtraction = default(bool?), bool? analyze = default(bool?), bool? includeNutrition = default(bool?), bool? includeTaste = default(bool?));

        /// <summary>
        /// Extract Recipe from Website
        /// </summary>
        /// <remarks>
        /// This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The URL of the recipe page.</param>
        /// <param name="forceExtraction">If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)</param>
        /// <param name="analyze">If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients. (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> ExtractRecipeFromWebsiteWithHttpInfo(string url, bool? forceExtraction = default(bool?), bool? analyze = default(bool?), bool? includeNutrition = default(bool?), bool? includeTaste = default(bool?));
        /// <summary>
        /// Get Analyzed Recipe Instructions
        /// </summary>
        /// <remarks>
        /// Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="stepBreakdown">Whether to break down the recipe steps even more. (optional)</param>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 GetAnalyzedRecipeInstructions(int id, bool? stepBreakdown = default(bool?));

        /// <summary>
        /// Get Analyzed Recipe Instructions
        /// </summary>
        /// <remarks>
        /// Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="stepBreakdown">Whether to break down the recipe steps even more. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> GetAnalyzedRecipeInstructionsWithHttpInfo(int id, bool? stepBreakdown = default(bool?));
        /// <summary>
        /// Get Random Recipes
        /// </summary>
        /// <remarks>
        /// Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 GetRandomRecipes(bool? limitLicense = default(bool?), string? tags = default(string?), int? number = default(int?));

        /// <summary>
        /// Get Random Recipes
        /// </summary>
        /// <remarks>
        /// Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> GetRandomRecipesWithHttpInfo(bool? limitLicense = default(bool?), string? tags = default(string?), int? number = default(int?));
        /// <summary>
        /// Equipment by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s equipment list.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 GetRecipeEquipmentByID(int id);

        /// <summary>
        /// Equipment by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s equipment list.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> GetRecipeEquipmentByIDWithHttpInfo(int id);
        /// <summary>
        /// Get Recipe Information
        /// </summary>
        /// <remarks>
        /// Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 GetRecipeInformation(int id, bool? includeNutrition = default(bool?));

        /// <summary>
        /// Get Recipe Information
        /// </summary>
        /// <remarks>
        /// Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> GetRecipeInformationWithHttpInfo(int id, bool? includeNutrition = default(bool?));
        /// <summary>
        /// Get Recipe Information Bulk
        /// </summary>
        /// <remarks>
        /// Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of recipe ids.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <returns>List&lt;InlineResponse2004&gt;</returns>
        List<InlineResponse2004> GetRecipeInformationBulk(string ids, bool? includeNutrition = default(bool?));

        /// <summary>
        /// Get Recipe Information Bulk
        /// </summary>
        /// <remarks>
        /// Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of recipe ids.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2004&gt;</returns>
        ApiResponse<List<InlineResponse2004>> GetRecipeInformationBulkWithHttpInfo(string ids, bool? includeNutrition = default(bool?));
        /// <summary>
        /// Ingredients by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s ingredient list.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 GetRecipeIngredientsByID(int id);

        /// <summary>
        /// Ingredients by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s ingredient list.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> GetRecipeIngredientsByIDWithHttpInfo(int id);
        /// <summary>
        /// Nutrition by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition data.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 GetRecipeNutritionWidgetByID(int id);

        /// <summary>
        /// Nutrition by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition data.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> GetRecipeNutritionWidgetByIDWithHttpInfo(int id);
        /// <summary>
        /// Price Breakdown by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s price breakdown data.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 GetRecipePriceBreakdownByID(int id);

        /// <summary>
        /// Price Breakdown by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s price breakdown data.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> GetRecipePriceBreakdownByIDWithHttpInfo(int id);
        /// <summary>
        /// Taste by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional, default to true)</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 GetRecipeTasteByID(int id, bool? normalize = default(bool?));

        /// <summary>
        /// Taste by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional, default to true)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> GetRecipeTasteByIDWithHttpInfo(int id, bool? normalize = default(bool?));
        /// <summary>
        /// Get Similar Recipes
        /// </summary>
        /// <remarks>
        /// Find recipes which are similar to the given one.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <returns>List&lt;InlineResponse2005&gt;</returns>
        List<InlineResponse2005> GetSimilarRecipes(int id, int? number = default(int?), bool? limitLicense = default(bool?));

        /// <summary>
        /// Get Similar Recipes
        /// </summary>
        /// <remarks>
        /// Find recipes which are similar to the given one.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2005&gt;</returns>
        ApiResponse<List<InlineResponse2005>> GetSimilarRecipesWithHttpInfo(int id, int? number = default(int?), bool? limitLicense = default(bool?));
        /// <summary>
        /// Guess Nutrition by Dish Name
        /// </summary>
        /// <remarks>
        /// Estimate the macronutrients of a dish based on its title.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the dish.</param>
        /// <returns>InlineResponse20021</returns>
        InlineResponse20021 GuessNutritionByDishName(string title);

        /// <summary>
        /// Guess Nutrition by Dish Name
        /// </summary>
        /// <remarks>
        /// Estimate the macronutrients of a dish based on its title.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the dish.</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        ApiResponse<InlineResponse20021> GuessNutritionByDishNameWithHttpInfo(string title);
        /// <summary>
        /// Ingredients by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s ingredient list.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <returns>Object</returns>
        Object IngredientsByIDImage(decimal id, string? measure = default(string?));

        /// <summary>
        /// Ingredients by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s ingredient list.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> IngredientsByIDImageWithHttpInfo(decimal id, string? measure = default(string?));
        /// <summary>
        /// Parse Ingredients
        /// </summary>
        /// <remarks>
        /// Extract an ingredient from plain text.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <returns>List&lt;InlineResponse20020&gt;</returns>
        List<InlineResponse20020> ParseIngredients(string? contentType = default(string?), string? language = default(string?));

        /// <summary>
        /// Parse Ingredients
        /// </summary>
        /// <remarks>
        /// Extract an ingredient from plain text.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20020&gt;</returns>
        ApiResponse<List<InlineResponse20020>> ParseIngredientsWithHttpInfo(string? contentType = default(string?), string? language = default(string?));
        /// <summary>
        /// Price Breakdown by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s price breakdown.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <returns>Object</returns>
        Object PriceBreakdownByIDImage(decimal id);

        /// <summary>
        /// Price Breakdown by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s price breakdown.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PriceBreakdownByIDImageWithHttpInfo(decimal id);
        /// <summary>
        /// Recipe Nutrition by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s nutritional information as an image.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <returns>Object</returns>
        Object RecipeNutritionByIDImage(decimal id);

        /// <summary>
        /// Recipe Nutrition by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s nutritional information as an image.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RecipeNutritionByIDImageWithHttpInfo(decimal id);
        /// <summary>
        /// Recipe Nutrition Label Image
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition label as an image.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <returns>Object</returns>
        Object RecipeNutritionLabelImage(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?));

        /// <summary>
        /// Recipe Nutrition Label Image
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition label as an image.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RecipeNutritionLabelImageWithHttpInfo(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?));
        /// <summary>
        /// Recipe Nutrition Label Widget
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition label as an HTML widget.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <returns>string</returns>
        string RecipeNutritionLabelWidget(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?));

        /// <summary>
        /// Recipe Nutrition Label Widget
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition label as an HTML widget.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> RecipeNutritionLabelWidgetWithHttpInfo(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?));
        /// <summary>
        /// Recipe Taste by ID Image
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <returns>Object</returns>
        Object RecipeTasteByIDImage(decimal id, bool? normalize = default(bool?), string? rgb = default(string?));

        /// <summary>
        /// Recipe Taste by ID Image
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RecipeTasteByIDImageWithHttpInfo(decimal id, bool? normalize = default(bool?), string? rgb = default(string?));
        /// <summary>
        /// Search Recipes
        /// </summary>
        /// <remarks>
        /// Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="excludeCuisine">The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="type">The type of recipe. See a full list of supported meal types. (optional)</param>
        /// <param name="instructionsRequired">Whether the recipes must have instructions. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="addRecipeNutrition">If set to true, you get nutritional information about each recipes returned. (optional)</param>
        /// <param name="author">The username of the recipe author. (optional)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="recipeBoxId">The id of the recipe box to which the search should be limited to. (optional)</param>
        /// <param name="titleMatch">Enter text that must be found in the title of the recipes. (optional)</param>
        /// <param name="maxReadyTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 SearchRecipes(string? query = default(string?), string? cuisine = default(string?), string? excludeCuisine = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), string? type = default(string?), bool? instructionsRequired = default(bool?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), bool? addRecipeNutrition = default(bool?), string? author = default(string?), string? tags = default(string?), decimal? recipeBoxId = default(decimal?), string? titleMatch = default(string?), decimal? maxReadyTime = default(decimal?), bool? ignorePantry = default(bool?), string? sort = default(string?), string? sortDirection = default(string?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? limitLicense = default(bool?));

        /// <summary>
        /// Search Recipes
        /// </summary>
        /// <remarks>
        /// Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="excludeCuisine">The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="type">The type of recipe. See a full list of supported meal types. (optional)</param>
        /// <param name="instructionsRequired">Whether the recipes must have instructions. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="addRecipeNutrition">If set to true, you get nutritional information about each recipes returned. (optional)</param>
        /// <param name="author">The username of the recipe author. (optional)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="recipeBoxId">The id of the recipe box to which the search should be limited to. (optional)</param>
        /// <param name="titleMatch">Enter text that must be found in the title of the recipes. (optional)</param>
        /// <param name="maxReadyTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> SearchRecipesWithHttpInfo(string? query = default(string?), string? cuisine = default(string?), string? excludeCuisine = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), string? type = default(string?), bool? instructionsRequired = default(bool?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), bool? addRecipeNutrition = default(bool?), string? author = default(string?), string? tags = default(string?), decimal? recipeBoxId = default(decimal?), string? titleMatch = default(string?), decimal? maxReadyTime = default(decimal?), bool? ignorePantry = default(bool?), string? sort = default(string?), string? sortDirection = default(string?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? limitLicense = default(bool?));
        /// <summary>
        /// Search Recipes by Ingredients
        /// </summary>
        /// <remarks>
        ///  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="ranking">Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <returns>List&lt;InlineResponse2001&gt;</returns>
        List<InlineResponse2001> SearchRecipesByIngredients(string? ingredients = default(string?), int? number = default(int?), bool? limitLicense = default(bool?), decimal? ranking = default(decimal?), bool? ignorePantry = default(bool?));

        /// <summary>
        /// Search Recipes by Ingredients
        /// </summary>
        /// <remarks>
        ///  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="ranking">Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2001&gt;</returns>
        ApiResponse<List<InlineResponse2001>> SearchRecipesByIngredientsWithHttpInfo(string? ingredients = default(string?), int? number = default(int?), bool? limitLicense = default(bool?), decimal? ranking = default(decimal?), bool? ignorePantry = default(bool?));
        /// <summary>
        /// Search Recipes by Nutrients
        /// </summary>
        /// <remarks>
        /// Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="random">If true, every request will give you a random set of recipes within the requested limits. (optional)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <returns>List&lt;InlineResponse2002&gt;</returns>
        List<InlineResponse2002> SearchRecipesByNutrients(decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? random = default(bool?), bool? limitLicense = default(bool?));

        /// <summary>
        /// Search Recipes by Nutrients
        /// </summary>
        /// <remarks>
        /// Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="random">If true, every request will give you a random set of recipes within the requested limits. (optional)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2002&gt;</returns>
        ApiResponse<List<InlineResponse2002>> SearchRecipesByNutrientsWithHttpInfo(decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? random = default(bool?), bool? limitLicense = default(bool?));
        /// <summary>
        /// Summarize Recipe
        /// </summary>
        /// <remarks>
        /// Automatically generate a short description that summarizes key information about the recipe.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 SummarizeRecipe(int id);

        /// <summary>
        /// Summarize Recipe
        /// </summary>
        /// <remarks>
        /// Automatically generate a short description that summarizes key information about the recipe.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> SummarizeRecipeWithHttpInfo(int id);
        /// <summary>
        /// Equipment Widget
        /// </summary>
        /// <remarks>
        /// Visualize the equipment used to make a recipe.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <returns>string</returns>
        string VisualizeEquipment(string? contentType = default(string?), string? accept = default(string?));

        /// <summary>
        /// Equipment Widget
        /// </summary>
        /// <remarks>
        /// Visualize the equipment used to make a recipe.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VisualizeEquipmentWithHttpInfo(string? contentType = default(string?), string? accept = default(string?));
        /// <summary>
        /// Price Breakdown Widget
        /// </summary>
        /// <remarks>
        /// Visualize the price breakdown of a recipe.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <returns>string</returns>
        string VisualizePriceBreakdown(string? contentType = default(string?), string? accept = default(string?), string? language = default(string?));

        /// <summary>
        /// Price Breakdown Widget
        /// </summary>
        /// <remarks>
        /// Visualize the price breakdown of a recipe.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VisualizePriceBreakdownWithHttpInfo(string? contentType = default(string?), string? accept = default(string?), string? language = default(string?));
        /// <summary>
        /// Equipment by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s equipment list.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <returns>string</returns>
        string VisualizeRecipeEquipmentByID(int id, bool? defaultCss = default(bool?));

        /// <summary>
        /// Equipment by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s equipment list.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VisualizeRecipeEquipmentByIDWithHttpInfo(int id, bool? defaultCss = default(bool?));
        /// <summary>
        /// Ingredients by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s ingredient list.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <returns>string</returns>
        string VisualizeRecipeIngredientsByID(int id, bool? defaultCss = default(bool?), string? measure = default(string?));

        /// <summary>
        /// Ingredients by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s ingredient list.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VisualizeRecipeIngredientsByIDWithHttpInfo(int id, bool? defaultCss = default(bool?), string? measure = default(string?));
        /// <summary>
        /// Recipe Nutrition Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <returns>string</returns>
        string VisualizeRecipeNutrition(string? contentType = default(string?), string? accept = default(string?), string? language = default(string?));

        /// <summary>
        /// Recipe Nutrition Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VisualizeRecipeNutritionWithHttpInfo(string? contentType = default(string?), string? accept = default(string?), string? language = default(string?));
        /// <summary>
        /// Recipe Nutrition by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <returns>string</returns>
        string VisualizeRecipeNutritionByID(int id, bool? defaultCss = default(bool?), string? accept = default(string?));

        /// <summary>
        /// Recipe Nutrition by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VisualizeRecipeNutritionByIDWithHttpInfo(int id, bool? defaultCss = default(bool?), string? accept = default(string?));
        /// <summary>
        /// Price Breakdown by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s price breakdown.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <returns>string</returns>
        string VisualizeRecipePriceBreakdownByID(int id, bool? defaultCss = default(bool?));

        /// <summary>
        /// Price Breakdown by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s price breakdown.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VisualizeRecipePriceBreakdownByIDWithHttpInfo(int id, bool? defaultCss = default(bool?));
        /// <summary>
        /// Recipe Taste Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="normalize">Whether to normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <returns>string</returns>
        string VisualizeRecipeTaste(string? language = default(string?), string? contentType = default(string?), string? accept = default(string?), bool? normalize = default(bool?), string? rgb = default(string?));

        /// <summary>
        /// Recipe Taste Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="normalize">Whether to normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VisualizeRecipeTasteWithHttpInfo(string? language = default(string?), string? contentType = default(string?), string? accept = default(string?), bool? normalize = default(bool?), string? rgb = default(string?));
        /// <summary>
        /// Recipe Taste by ID Widget
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Whether to normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <returns>string</returns>
        string VisualizeRecipeTasteByID(int id, bool? normalize = default(bool?), string? rgb = default(string?));

        /// <summary>
        /// Recipe Taste by ID Widget
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Whether to normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> VisualizeRecipeTasteByIDWithHttpInfo(int id, bool? normalize = default(bool?), string? rgb = default(string?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecipesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Analyze a Recipe Search Query
        /// </summary>
        /// <remarks>
        /// Parse a recipe search query to find out its intention.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The recipe search query.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20018</returns>
        System.Threading.Tasks.Task<InlineResponse20018> AnalyzeARecipeSearchQueryAsync(string q, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Analyze a Recipe Search Query
        /// </summary>
        /// <remarks>
        /// Parse a recipe search query to find out its intention.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The recipe search query.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> AnalyzeARecipeSearchQueryWithHttpInfoAsync(string q, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Analyze Recipe Instructions
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20016</returns>
        System.Threading.Tasks.Task<InlineResponse20016> AnalyzeRecipeInstructionsAsync(string? contentType = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Analyze Recipe Instructions
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> AnalyzeRecipeInstructionsWithHttpInfoAsync(string? contentType = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Autocomplete Recipe Search
        /// </summary>
        /// <remarks>
        /// Autocomplete a partial input to suggest possible recipe names.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InlineResponse2007&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2007>> AutocompleteRecipeSearchAsync(string? query = default(string?), int? number = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Autocomplete Recipe Search
        /// </summary>
        /// <remarks>
        /// Autocomplete a partial input to suggest possible recipe names.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2007&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2007>>> AutocompleteRecipeSearchWithHttpInfoAsync(string? query = default(string?), int? number = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Classify Cuisine
        /// </summary>
        /// <remarks>
        /// Classify the recipe&#39;s cuisine.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> ClassifyCuisineAsync(string? contentType = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Classify Cuisine
        /// </summary>
        /// <remarks>
        /// Classify the recipe&#39;s cuisine.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> ClassifyCuisineWithHttpInfoAsync(string? contentType = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Convert Amounts
        /// </summary>
        /// <remarks>
        /// Convert amounts like \&quot;2 cups of flour to grams\&quot;.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientName">The ingredient which you want to convert.</param>
        /// <param name="sourceAmount">The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.</param>
        /// <param name="sourceUnit">The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="targetUnit">The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> ConvertAmountsAsync(string ingredientName, decimal sourceAmount, string sourceUnit, string targetUnit, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Convert Amounts
        /// </summary>
        /// <remarks>
        /// Convert amounts like \&quot;2 cups of flour to grams\&quot;.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientName">The ingredient which you want to convert.</param>
        /// <param name="sourceAmount">The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.</param>
        /// <param name="sourceUnit">The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="targetUnit">The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> ConvertAmountsWithHttpInfoAsync(string ingredientName, decimal sourceAmount, string sourceUnit, string targetUnit, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Recipe Card
        /// </summary>
        /// <remarks>
        /// Generate a recipe card for a recipe.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> CreateRecipeCardAsync(string? contentType = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Recipe Card
        /// </summary>
        /// <remarks>
        /// Generate a recipe card for a recipe.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> CreateRecipeCardWithHttpInfoAsync(string? contentType = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Equipment by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s equipment list as an image.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> EquipmentByIDImageAsync(decimal id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Equipment by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s equipment list as an image.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EquipmentByIDImageWithHttpInfoAsync(decimal id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Extract Recipe from Website
        /// </summary>
        /// <remarks>
        /// This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The URL of the recipe page.</param>
        /// <param name="forceExtraction">If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)</param>
        /// <param name="analyze">If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> ExtractRecipeFromWebsiteAsync(string url, bool? forceExtraction = default(bool?), bool? analyze = default(bool?), bool? includeNutrition = default(bool?), bool? includeTaste = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Extract Recipe from Website
        /// </summary>
        /// <remarks>
        /// This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The URL of the recipe page.</param>
        /// <param name="forceExtraction">If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)</param>
        /// <param name="analyze">If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> ExtractRecipeFromWebsiteWithHttpInfoAsync(string url, bool? forceExtraction = default(bool?), bool? analyze = default(bool?), bool? includeNutrition = default(bool?), bool? includeTaste = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Analyzed Recipe Instructions
        /// </summary>
        /// <remarks>
        /// Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="stepBreakdown">Whether to break down the recipe steps even more. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> GetAnalyzedRecipeInstructionsAsync(int id, bool? stepBreakdown = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Analyzed Recipe Instructions
        /// </summary>
        /// <remarks>
        /// Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="stepBreakdown">Whether to break down the recipe steps even more. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GetAnalyzedRecipeInstructionsWithHttpInfoAsync(int id, bool? stepBreakdown = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Random Recipes
        /// </summary>
        /// <remarks>
        /// Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> GetRandomRecipesAsync(bool? limitLicense = default(bool?), string? tags = default(string?), int? number = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Random Recipes
        /// </summary>
        /// <remarks>
        /// Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> GetRandomRecipesWithHttpInfoAsync(bool? limitLicense = default(bool?), string? tags = default(string?), int? number = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Equipment by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s equipment list.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> GetRecipeEquipmentByIDAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Equipment by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s equipment list.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> GetRecipeEquipmentByIDWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Recipe Information
        /// </summary>
        /// <remarks>
        /// Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> GetRecipeInformationAsync(int id, bool? includeNutrition = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Recipe Information
        /// </summary>
        /// <remarks>
        /// Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetRecipeInformationWithHttpInfoAsync(int id, bool? includeNutrition = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Recipe Information Bulk
        /// </summary>
        /// <remarks>
        /// Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of recipe ids.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InlineResponse2004&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2004>> GetRecipeInformationBulkAsync(string ids, bool? includeNutrition = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Recipe Information Bulk
        /// </summary>
        /// <remarks>
        /// Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of recipe ids.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2004&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2004>>> GetRecipeInformationBulkWithHttpInfoAsync(string ids, bool? includeNutrition = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ingredients by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s ingredient list.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> GetRecipeIngredientsByIDAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ingredients by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s ingredient list.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> GetRecipeIngredientsByIDWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Nutrition by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition data.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> GetRecipeNutritionWidgetByIDAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Nutrition by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition data.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetRecipeNutritionWidgetByIDWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Price Breakdown by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s price breakdown data.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> GetRecipePriceBreakdownByIDAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Price Breakdown by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s price breakdown data.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> GetRecipePriceBreakdownByIDWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Taste by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> GetRecipeTasteByIDAsync(int id, bool? normalize = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Taste by ID
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> GetRecipeTasteByIDWithHttpInfoAsync(int id, bool? normalize = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Similar Recipes
        /// </summary>
        /// <remarks>
        /// Find recipes which are similar to the given one.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InlineResponse2005&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2005>> GetSimilarRecipesAsync(int id, int? number = default(int?), bool? limitLicense = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Similar Recipes
        /// </summary>
        /// <remarks>
        /// Find recipes which are similar to the given one.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2005&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2005>>> GetSimilarRecipesWithHttpInfoAsync(int id, int? number = default(int?), bool? limitLicense = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Guess Nutrition by Dish Name
        /// </summary>
        /// <remarks>
        /// Estimate the macronutrients of a dish based on its title.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the dish.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20021</returns>
        System.Threading.Tasks.Task<InlineResponse20021> GuessNutritionByDishNameAsync(string title, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Guess Nutrition by Dish Name
        /// </summary>
        /// <remarks>
        /// Estimate the macronutrients of a dish based on its title.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the dish.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> GuessNutritionByDishNameWithHttpInfoAsync(string title, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ingredients by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s ingredient list.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> IngredientsByIDImageAsync(decimal id, string? measure = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ingredients by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s ingredient list.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IngredientsByIDImageWithHttpInfoAsync(decimal id, string? measure = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Parse Ingredients
        /// </summary>
        /// <remarks>
        /// Extract an ingredient from plain text.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InlineResponse20020&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20020>> ParseIngredientsAsync(string? contentType = default(string?), string? language = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Parse Ingredients
        /// </summary>
        /// <remarks>
        /// Extract an ingredient from plain text.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20020&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20020>>> ParseIngredientsWithHttpInfoAsync(string? contentType = default(string?), string? language = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Price Breakdown by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s price breakdown.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PriceBreakdownByIDImageAsync(decimal id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Price Breakdown by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s price breakdown.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PriceBreakdownByIDImageWithHttpInfoAsync(decimal id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recipe Nutrition by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s nutritional information as an image.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RecipeNutritionByIDImageAsync(decimal id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recipe Nutrition by ID Image
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s nutritional information as an image.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RecipeNutritionByIDImageWithHttpInfoAsync(decimal id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recipe Nutrition Label Image
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition label as an image.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RecipeNutritionLabelImageAsync(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recipe Nutrition Label Image
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition label as an image.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RecipeNutritionLabelImageWithHttpInfoAsync(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recipe Nutrition Label Widget
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition label as an HTML widget.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> RecipeNutritionLabelWidgetAsync(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recipe Nutrition Label Widget
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition label as an HTML widget.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> RecipeNutritionLabelWidgetWithHttpInfoAsync(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recipe Taste by ID Image
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RecipeTasteByIDImageAsync(decimal id, bool? normalize = default(bool?), string? rgb = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recipe Taste by ID Image
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RecipeTasteByIDImageWithHttpInfoAsync(decimal id, bool? normalize = default(bool?), string? rgb = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Recipes
        /// </summary>
        /// <remarks>
        /// Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="excludeCuisine">The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="type">The type of recipe. See a full list of supported meal types. (optional)</param>
        /// <param name="instructionsRequired">Whether the recipes must have instructions. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="addRecipeNutrition">If set to true, you get nutritional information about each recipes returned. (optional)</param>
        /// <param name="author">The username of the recipe author. (optional)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="recipeBoxId">The id of the recipe box to which the search should be limited to. (optional)</param>
        /// <param name="titleMatch">Enter text that must be found in the title of the recipes. (optional)</param>
        /// <param name="maxReadyTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> SearchRecipesAsync(string? query = default(string?), string? cuisine = default(string?), string? excludeCuisine = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), string? type = default(string?), bool? instructionsRequired = default(bool?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), bool? addRecipeNutrition = default(bool?), string? author = default(string?), string? tags = default(string?), decimal? recipeBoxId = default(decimal?), string? titleMatch = default(string?), decimal? maxReadyTime = default(decimal?), bool? ignorePantry = default(bool?), string? sort = default(string?), string? sortDirection = default(string?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? limitLicense = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Recipes
        /// </summary>
        /// <remarks>
        /// Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="excludeCuisine">The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="type">The type of recipe. See a full list of supported meal types. (optional)</param>
        /// <param name="instructionsRequired">Whether the recipes must have instructions. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="addRecipeNutrition">If set to true, you get nutritional information about each recipes returned. (optional)</param>
        /// <param name="author">The username of the recipe author. (optional)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="recipeBoxId">The id of the recipe box to which the search should be limited to. (optional)</param>
        /// <param name="titleMatch">Enter text that must be found in the title of the recipes. (optional)</param>
        /// <param name="maxReadyTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> SearchRecipesWithHttpInfoAsync(string? query = default(string?), string? cuisine = default(string?), string? excludeCuisine = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), string? type = default(string?), bool? instructionsRequired = default(bool?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), bool? addRecipeNutrition = default(bool?), string? author = default(string?), string? tags = default(string?), decimal? recipeBoxId = default(decimal?), string? titleMatch = default(string?), decimal? maxReadyTime = default(decimal?), bool? ignorePantry = default(bool?), string? sort = default(string?), string? sortDirection = default(string?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? limitLicense = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Recipes by Ingredients
        /// </summary>
        /// <remarks>
        ///  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="ranking">Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InlineResponse2001&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2001>> SearchRecipesByIngredientsAsync(string? ingredients = default(string?), int? number = default(int?), bool? limitLicense = default(bool?), decimal? ranking = default(decimal?), bool? ignorePantry = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Recipes by Ingredients
        /// </summary>
        /// <remarks>
        ///  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="ranking">Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2001&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2001>>> SearchRecipesByIngredientsWithHttpInfoAsync(string? ingredients = default(string?), int? number = default(int?), bool? limitLicense = default(bool?), decimal? ranking = default(decimal?), bool? ignorePantry = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Recipes by Nutrients
        /// </summary>
        /// <remarks>
        /// Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="random">If true, every request will give you a random set of recipes within the requested limits. (optional)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InlineResponse2002&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2002>> SearchRecipesByNutrientsAsync(decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? random = default(bool?), bool? limitLicense = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Recipes by Nutrients
        /// </summary>
        /// <remarks>
        /// Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="random">If true, every request will give you a random set of recipes within the requested limits. (optional)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2002&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2002>>> SearchRecipesByNutrientsWithHttpInfoAsync(decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? random = default(bool?), bool? limitLicense = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Summarize Recipe
        /// </summary>
        /// <remarks>
        /// Automatically generate a short description that summarizes key information about the recipe.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> SummarizeRecipeAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Summarize Recipe
        /// </summary>
        /// <remarks>
        /// Automatically generate a short description that summarizes key information about the recipe.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> SummarizeRecipeWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Equipment Widget
        /// </summary>
        /// <remarks>
        /// Visualize the equipment used to make a recipe.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VisualizeEquipmentAsync(string? contentType = default(string?), string? accept = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Equipment Widget
        /// </summary>
        /// <remarks>
        /// Visualize the equipment used to make a recipe.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VisualizeEquipmentWithHttpInfoAsync(string? contentType = default(string?), string? accept = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Price Breakdown Widget
        /// </summary>
        /// <remarks>
        /// Visualize the price breakdown of a recipe.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VisualizePriceBreakdownAsync(string? contentType = default(string?), string? accept = default(string?), string? language = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Price Breakdown Widget
        /// </summary>
        /// <remarks>
        /// Visualize the price breakdown of a recipe.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VisualizePriceBreakdownWithHttpInfoAsync(string? contentType = default(string?), string? accept = default(string?), string? language = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Equipment by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s equipment list.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VisualizeRecipeEquipmentByIDAsync(int id, bool? defaultCss = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Equipment by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s equipment list.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VisualizeRecipeEquipmentByIDWithHttpInfoAsync(int id, bool? defaultCss = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ingredients by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s ingredient list.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VisualizeRecipeIngredientsByIDAsync(int id, bool? defaultCss = default(bool?), string? measure = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ingredients by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s ingredient list.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VisualizeRecipeIngredientsByIDWithHttpInfoAsync(int id, bool? defaultCss = default(bool?), string? measure = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recipe Nutrition Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VisualizeRecipeNutritionAsync(string? contentType = default(string?), string? accept = default(string?), string? language = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recipe Nutrition Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VisualizeRecipeNutritionWithHttpInfoAsync(string? contentType = default(string?), string? accept = default(string?), string? language = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recipe Nutrition by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VisualizeRecipeNutritionByIDAsync(int id, bool? defaultCss = default(bool?), string? accept = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recipe Nutrition by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VisualizeRecipeNutritionByIDWithHttpInfoAsync(int id, bool? defaultCss = default(bool?), string? accept = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Price Breakdown by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s price breakdown.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VisualizeRecipePriceBreakdownByIDAsync(int id, bool? defaultCss = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Price Breakdown by ID Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s price breakdown.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VisualizeRecipePriceBreakdownByIDWithHttpInfoAsync(int id, bool? defaultCss = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recipe Taste Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="normalize">Whether to normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VisualizeRecipeTasteAsync(string? language = default(string?), string? contentType = default(string?), string? accept = default(string?), bool? normalize = default(bool?), string? rgb = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recipe Taste Widget
        /// </summary>
        /// <remarks>
        /// Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="normalize">Whether to normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VisualizeRecipeTasteWithHttpInfoAsync(string? language = default(string?), string? contentType = default(string?), string? accept = default(string?), bool? normalize = default(bool?), string? rgb = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recipe Taste by ID Widget
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Whether to normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> VisualizeRecipeTasteByIDAsync(int id, bool? normalize = default(bool?), string? rgb = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recipe Taste by ID Widget
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Whether to normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> VisualizeRecipeTasteByIDWithHttpInfoAsync(int id, bool? normalize = default(bool?), string? rgb = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecipesApi : IRecipesApiSync, IRecipesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecipesApi : IRecipesApi
    {
        private Spoonacular.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecipesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecipesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecipesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecipesApi(string basePath)
        {
            this.Configuration = Spoonacular.Client.Configuration.MergeConfigurations(
                Spoonacular.Client.GlobalConfiguration.Instance,
                new Spoonacular.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecipesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecipesApi(Spoonacular.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Spoonacular.Client.Configuration.MergeConfigurations(
                Spoonacular.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Spoonacular.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecipesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RecipesApi(Spoonacular.Client.ISynchronousClient client, Spoonacular.Client.IAsynchronousClient asyncClient, Spoonacular.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Spoonacular.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Spoonacular.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Spoonacular.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Spoonacular.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Analyze a Recipe Search Query Parse a recipe search query to find out its intention.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The recipe search query.</param>
        /// <returns>InlineResponse20018</returns>
        public InlineResponse20018 AnalyzeARecipeSearchQuery(string q)
        {
            Spoonacular.Client.ApiResponse<InlineResponse20018> localVarResponse = AnalyzeARecipeSearchQueryWithHttpInfo(q);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Analyze a Recipe Search Query Parse a recipe search query to find out its intention.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The recipe search query.</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        public Spoonacular.Client.ApiResponse<InlineResponse20018> AnalyzeARecipeSearchQueryWithHttpInfo(string q)
        {
            // verify the required parameter 'q' is set
            if (q == null)
            {
                throw new Spoonacular.Client.ApiException(400, "Missing required parameter 'q' when calling RecipesApi->AnalyzeARecipeSearchQuery");
            }

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "q", q));

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse20018>("/recipes/queries/analyze", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnalyzeARecipeSearchQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Analyze a Recipe Search Query Parse a recipe search query to find out its intention.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The recipe search query.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20018</returns>
        public async System.Threading.Tasks.Task<InlineResponse20018> AnalyzeARecipeSearchQueryAsync(string q, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<InlineResponse20018> localVarResponse = await AnalyzeARecipeSearchQueryWithHttpInfoAsync(q, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Analyze a Recipe Search Query Parse a recipe search query to find out its intention.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">The recipe search query.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<InlineResponse20018>> AnalyzeARecipeSearchQueryWithHttpInfoAsync(string q, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'q' is set
            if (q == null)
            {
                throw new Spoonacular.Client.ApiException(400, "Missing required parameter 'q' when calling RecipesApi->AnalyzeARecipeSearchQuery");
            }


            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "q", q));

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20018>("/recipes/queries/analyze", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnalyzeARecipeSearchQuery", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Analyze Recipe Instructions This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <returns>InlineResponse20016</returns>
        public InlineResponse20016 AnalyzeRecipeInstructions(string? contentType = default(string?))
        {
            Spoonacular.Client.ApiResponse<InlineResponse20016> localVarResponse = AnalyzeRecipeInstructionsWithHttpInfo(contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Analyze Recipe Instructions This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        public Spoonacular.Client.ApiResponse<InlineResponse20016> AnalyzeRecipeInstructionsWithHttpInfo(string? contentType = default(string?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", Spoonacular.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InlineResponse20016>("/recipes/analyzeInstructions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnalyzeRecipeInstructions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Analyze Recipe Instructions This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20016</returns>
        public async System.Threading.Tasks.Task<InlineResponse20016> AnalyzeRecipeInstructionsAsync(string? contentType = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<InlineResponse20016> localVarResponse = await AnalyzeRecipeInstructionsWithHttpInfoAsync(contentType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Analyze Recipe Instructions This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<InlineResponse20016>> AnalyzeRecipeInstructionsWithHttpInfoAsync(string? contentType = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", Spoonacular.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20016>("/recipes/analyzeInstructions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnalyzeRecipeInstructions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Autocomplete Recipe Search Autocomplete a partial input to suggest possible recipe names.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <returns>List&lt;InlineResponse2007&gt;</returns>
        public List<InlineResponse2007> AutocompleteRecipeSearch(string? query = default(string?), int? number = default(int?))
        {
            Spoonacular.Client.ApiResponse<List<InlineResponse2007>> localVarResponse = AutocompleteRecipeSearchWithHttpInfo(query, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Autocomplete Recipe Search Autocomplete a partial input to suggest possible recipe names.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2007&gt;</returns>
        public Spoonacular.Client.ApiResponse<List<InlineResponse2007>> AutocompleteRecipeSearchWithHttpInfo(string? query = default(string?), int? number = default(int?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<InlineResponse2007>>("/recipes/autocomplete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AutocompleteRecipeSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Autocomplete Recipe Search Autocomplete a partial input to suggest possible recipe names.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InlineResponse2007&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2007>> AutocompleteRecipeSearchAsync(string? query = default(string?), int? number = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<List<InlineResponse2007>> localVarResponse = await AutocompleteRecipeSearchWithHttpInfoAsync(query, number, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Autocomplete Recipe Search Autocomplete a partial input to suggest possible recipe names.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2007&gt;)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<List<InlineResponse2007>>> AutocompleteRecipeSearchWithHttpInfoAsync(string? query = default(string?), int? number = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<InlineResponse2007>>("/recipes/autocomplete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AutocompleteRecipeSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Classify Cuisine Classify the recipe&#39;s cuisine.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 ClassifyCuisine(string? contentType = default(string?))
        {
            Spoonacular.Client.ApiResponse<InlineResponse20017> localVarResponse = ClassifyCuisineWithHttpInfo(contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Classify Cuisine Classify the recipe&#39;s cuisine.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public Spoonacular.Client.ApiResponse<InlineResponse20017> ClassifyCuisineWithHttpInfo(string? contentType = default(string?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", Spoonacular.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InlineResponse20017>("/recipes/cuisine", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClassifyCuisine", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Classify Cuisine Classify the recipe&#39;s cuisine.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017> ClassifyCuisineAsync(string? contentType = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<InlineResponse20017> localVarResponse = await ClassifyCuisineWithHttpInfoAsync(contentType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Classify Cuisine Classify the recipe&#39;s cuisine.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<InlineResponse20017>> ClassifyCuisineWithHttpInfoAsync(string? contentType = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", Spoonacular.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20017>("/recipes/cuisine", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClassifyCuisine", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert Amounts Convert amounts like \&quot;2 cups of flour to grams\&quot;.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientName">The ingredient which you want to convert.</param>
        /// <param name="sourceAmount">The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.</param>
        /// <param name="sourceUnit">The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="targetUnit">The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 ConvertAmounts(string ingredientName, decimal sourceAmount, string sourceUnit, string targetUnit)
        {
            Spoonacular.Client.ApiResponse<InlineResponse20019> localVarResponse = ConvertAmountsWithHttpInfo(ingredientName, sourceAmount, sourceUnit, targetUnit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Amounts Convert amounts like \&quot;2 cups of flour to grams\&quot;.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientName">The ingredient which you want to convert.</param>
        /// <param name="sourceAmount">The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.</param>
        /// <param name="sourceUnit">The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="targetUnit">The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public Spoonacular.Client.ApiResponse<InlineResponse20019> ConvertAmountsWithHttpInfo(string ingredientName, decimal sourceAmount, string sourceUnit, string targetUnit)
        {
            // verify the required parameter 'ingredientName' is set
            if (ingredientName == null)
            {
                throw new Spoonacular.Client.ApiException(400, "Missing required parameter 'ingredientName' when calling RecipesApi->ConvertAmounts");
            }

            // verify the required parameter 'sourceUnit' is set
            if (sourceUnit == null)
            {
                throw new Spoonacular.Client.ApiException(400, "Missing required parameter 'sourceUnit' when calling RecipesApi->ConvertAmounts");
            }

            // verify the required parameter 'targetUnit' is set
            if (targetUnit == null)
            {
                throw new Spoonacular.Client.ApiException(400, "Missing required parameter 'targetUnit' when calling RecipesApi->ConvertAmounts");
            }

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ingredientName", ingredientName));
            localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sourceAmount", sourceAmount));
            localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sourceUnit", sourceUnit));
            localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "targetUnit", targetUnit));

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse20019>("/recipes/convert", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertAmounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert Amounts Convert amounts like \&quot;2 cups of flour to grams\&quot;.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientName">The ingredient which you want to convert.</param>
        /// <param name="sourceAmount">The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.</param>
        /// <param name="sourceUnit">The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="targetUnit">The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019> ConvertAmountsAsync(string ingredientName, decimal sourceAmount, string sourceUnit, string targetUnit, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<InlineResponse20019> localVarResponse = await ConvertAmountsWithHttpInfoAsync(ingredientName, sourceAmount, sourceUnit, targetUnit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Amounts Convert amounts like \&quot;2 cups of flour to grams\&quot;.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredientName">The ingredient which you want to convert.</param>
        /// <param name="sourceAmount">The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.</param>
        /// <param name="sourceUnit">The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="targetUnit">The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<InlineResponse20019>> ConvertAmountsWithHttpInfoAsync(string ingredientName, decimal sourceAmount, string sourceUnit, string targetUnit, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ingredientName' is set
            if (ingredientName == null)
            {
                throw new Spoonacular.Client.ApiException(400, "Missing required parameter 'ingredientName' when calling RecipesApi->ConvertAmounts");
            }

            // verify the required parameter 'sourceUnit' is set
            if (sourceUnit == null)
            {
                throw new Spoonacular.Client.ApiException(400, "Missing required parameter 'sourceUnit' when calling RecipesApi->ConvertAmounts");
            }

            // verify the required parameter 'targetUnit' is set
            if (targetUnit == null)
            {
                throw new Spoonacular.Client.ApiException(400, "Missing required parameter 'targetUnit' when calling RecipesApi->ConvertAmounts");
            }


            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ingredientName", ingredientName));
            localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sourceAmount", sourceAmount));
            localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sourceUnit", sourceUnit));
            localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "targetUnit", targetUnit));

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20019>("/recipes/convert", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertAmounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Recipe Card Generate a recipe card for a recipe.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 CreateRecipeCard(string? contentType = default(string?))
        {
            Spoonacular.Client.ApiResponse<InlineResponse20015> localVarResponse = CreateRecipeCardWithHttpInfo(contentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Recipe Card Generate a recipe card for a recipe.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public Spoonacular.Client.ApiResponse<InlineResponse20015> CreateRecipeCardWithHttpInfo(string? contentType = default(string?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", Spoonacular.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InlineResponse20015>("/recipes/visualizeRecipe", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRecipeCard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Recipe Card Generate a recipe card for a recipe.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> CreateRecipeCardAsync(string? contentType = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<InlineResponse20015> localVarResponse = await CreateRecipeCardWithHttpInfoAsync(contentType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Recipe Card Generate a recipe card for a recipe.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<InlineResponse20015>> CreateRecipeCardWithHttpInfoAsync(string? contentType = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", Spoonacular.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20015>("/recipes/visualizeRecipe", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRecipeCard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Equipment by ID Image Visualize a recipe&#39;s equipment list as an image.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <returns>Object</returns>
        public Object EquipmentByIDImage(decimal id)
        {
            Spoonacular.Client.ApiResponse<Object> localVarResponse = EquipmentByIDImageWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Equipment by ID Image Visualize a recipe&#39;s equipment list as an image.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <returns>ApiResponse of Object</returns>
        public Spoonacular.Client.ApiResponse<Object> EquipmentByIDImageWithHttpInfo(decimal id)
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/recipes/{id}/equipmentWidget.png", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EquipmentByIDImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Equipment by ID Image Visualize a recipe&#39;s equipment list as an image.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> EquipmentByIDImageAsync(decimal id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<Object> localVarResponse = await EquipmentByIDImageWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Equipment by ID Image Visualize a recipe&#39;s equipment list as an image.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<Object>> EquipmentByIDImageWithHttpInfoAsync(decimal id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/recipes/{id}/equipmentWidget.png", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EquipmentByIDImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract Recipe from Website This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The URL of the recipe page.</param>
        /// <param name="forceExtraction">If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)</param>
        /// <param name="analyze">If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients. (optional, default to false)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 ExtractRecipeFromWebsite(string url, bool? forceExtraction = default(bool?), bool? analyze = default(bool?), bool? includeNutrition = default(bool?), bool? includeTaste = default(bool?))
        {
            Spoonacular.Client.ApiResponse<InlineResponse2003> localVarResponse = ExtractRecipeFromWebsiteWithHttpInfo(url, forceExtraction, analyze, includeNutrition, includeTaste);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract Recipe from Website This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The URL of the recipe page.</param>
        /// <param name="forceExtraction">If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)</param>
        /// <param name="analyze">If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients. (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public Spoonacular.Client.ApiResponse<InlineResponse2003> ExtractRecipeFromWebsiteWithHttpInfo(string url, bool? forceExtraction = default(bool?), bool? analyze = default(bool?), bool? includeNutrition = default(bool?), bool? includeTaste = default(bool?))
        {
            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Spoonacular.Client.ApiException(400, "Missing required parameter 'url' when calling RecipesApi->ExtractRecipeFromWebsite");
            }

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            if (forceExtraction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "forceExtraction", forceExtraction));
            }
            if (analyze != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "analyze", analyze));
            }
            if (includeNutrition != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeNutrition", includeNutrition));
            }
            if (includeTaste != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeTaste", includeTaste));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2003>("/recipes/extract", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtractRecipeFromWebsite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract Recipe from Website This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The URL of the recipe page.</param>
        /// <param name="forceExtraction">If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)</param>
        /// <param name="analyze">If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> ExtractRecipeFromWebsiteAsync(string url, bool? forceExtraction = default(bool?), bool? analyze = default(bool?), bool? includeNutrition = default(bool?), bool? includeTaste = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<InlineResponse2003> localVarResponse = await ExtractRecipeFromWebsiteWithHttpInfoAsync(url, forceExtraction, analyze, includeNutrition, includeTaste, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract Recipe from Website This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The URL of the recipe page.</param>
        /// <param name="forceExtraction">If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)</param>
        /// <param name="analyze">If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="includeTaste">Whether taste data should be added to correctly parsed ingredients. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<InlineResponse2003>> ExtractRecipeFromWebsiteWithHttpInfoAsync(string url, bool? forceExtraction = default(bool?), bool? analyze = default(bool?), bool? includeNutrition = default(bool?), bool? includeTaste = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new Spoonacular.Client.ApiException(400, "Missing required parameter 'url' when calling RecipesApi->ExtractRecipeFromWebsite");
            }


            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            if (forceExtraction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "forceExtraction", forceExtraction));
            }
            if (analyze != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "analyze", analyze));
            }
            if (includeNutrition != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeNutrition", includeNutrition));
            }
            if (includeTaste != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeTaste", includeTaste));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2003>("/recipes/extract", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtractRecipeFromWebsite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Analyzed Recipe Instructions Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="stepBreakdown">Whether to break down the recipe steps even more. (optional)</param>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 GetAnalyzedRecipeInstructions(int id, bool? stepBreakdown = default(bool?))
        {
            Spoonacular.Client.ApiResponse<InlineResponse20013> localVarResponse = GetAnalyzedRecipeInstructionsWithHttpInfo(id, stepBreakdown);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Analyzed Recipe Instructions Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="stepBreakdown">Whether to break down the recipe steps even more. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public Spoonacular.Client.ApiResponse<InlineResponse20013> GetAnalyzedRecipeInstructionsWithHttpInfo(int id, bool? stepBreakdown = default(bool?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (stepBreakdown != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "stepBreakdown", stepBreakdown));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse20013>("/recipes/{id}/analyzedInstructions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnalyzedRecipeInstructions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Analyzed Recipe Instructions Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="stepBreakdown">Whether to break down the recipe steps even more. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013> GetAnalyzedRecipeInstructionsAsync(int id, bool? stepBreakdown = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<InlineResponse20013> localVarResponse = await GetAnalyzedRecipeInstructionsWithHttpInfoAsync(id, stepBreakdown, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Analyzed Recipe Instructions Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="stepBreakdown">Whether to break down the recipe steps even more. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<InlineResponse20013>> GetAnalyzedRecipeInstructionsWithHttpInfoAsync(int id, bool? stepBreakdown = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (stepBreakdown != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "stepBreakdown", stepBreakdown));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20013>("/recipes/{id}/analyzedInstructions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnalyzedRecipeInstructions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Random Recipes Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 GetRandomRecipes(bool? limitLicense = default(bool?), string? tags = default(string?), int? number = default(int?))
        {
            Spoonacular.Client.ApiResponse<InlineResponse2006> localVarResponse = GetRandomRecipesWithHttpInfo(limitLicense, tags, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Random Recipes Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public Spoonacular.Client.ApiResponse<InlineResponse2006> GetRandomRecipesWithHttpInfo(bool? limitLicense = default(bool?), string? tags = default(string?), int? number = default(int?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2006>("/recipes/random", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRandomRecipes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Random Recipes Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> GetRandomRecipesAsync(bool? limitLicense = default(bool?), string? tags = default(string?), int? number = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<InlineResponse2006> localVarResponse = await GetRandomRecipesWithHttpInfoAsync(limitLicense, tags, number, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Random Recipes Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<InlineResponse2006>> GetRandomRecipesWithHttpInfoAsync(bool? limitLicense = default(bool?), string? tags = default(string?), int? number = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2006>("/recipes/random", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRandomRecipes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Equipment by ID Get a recipe&#39;s equipment list.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 GetRecipeEquipmentByID(int id)
        {
            Spoonacular.Client.ApiResponse<InlineResponse2009> localVarResponse = GetRecipeEquipmentByIDWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Equipment by ID Get a recipe&#39;s equipment list.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public Spoonacular.Client.ApiResponse<InlineResponse2009> GetRecipeEquipmentByIDWithHttpInfo(int id)
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2009>("/recipes/{id}/equipmentWidget.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeEquipmentByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Equipment by ID Get a recipe&#39;s equipment list.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> GetRecipeEquipmentByIDAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<InlineResponse2009> localVarResponse = await GetRecipeEquipmentByIDWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Equipment by ID Get a recipe&#39;s equipment list.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<InlineResponse2009>> GetRecipeEquipmentByIDWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2009>("/recipes/{id}/equipmentWidget.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeEquipmentByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Recipe Information Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 GetRecipeInformation(int id, bool? includeNutrition = default(bool?))
        {
            Spoonacular.Client.ApiResponse<InlineResponse2003> localVarResponse = GetRecipeInformationWithHttpInfo(id, includeNutrition);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Recipe Information Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public Spoonacular.Client.ApiResponse<InlineResponse2003> GetRecipeInformationWithHttpInfo(int id, bool? includeNutrition = default(bool?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeNutrition != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeNutrition", includeNutrition));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2003>("/recipes/{id}/information", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Recipe Information Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> GetRecipeInformationAsync(int id, bool? includeNutrition = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<InlineResponse2003> localVarResponse = await GetRecipeInformationWithHttpInfoAsync(id, includeNutrition, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Recipe Information Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<InlineResponse2003>> GetRecipeInformationWithHttpInfoAsync(int id, bool? includeNutrition = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeNutrition != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeNutrition", includeNutrition));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2003>("/recipes/{id}/information", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Recipe Information Bulk Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of recipe ids.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <returns>List&lt;InlineResponse2004&gt;</returns>
        public List<InlineResponse2004> GetRecipeInformationBulk(string ids, bool? includeNutrition = default(bool?))
        {
            Spoonacular.Client.ApiResponse<List<InlineResponse2004>> localVarResponse = GetRecipeInformationBulkWithHttpInfo(ids, includeNutrition);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Recipe Information Bulk Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of recipe ids.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2004&gt;</returns>
        public Spoonacular.Client.ApiResponse<List<InlineResponse2004>> GetRecipeInformationBulkWithHttpInfo(string ids, bool? includeNutrition = default(bool?))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new Spoonacular.Client.ApiException(400, "Missing required parameter 'ids' when calling RecipesApi->GetRecipeInformationBulk");
            }

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            if (includeNutrition != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeNutrition", includeNutrition));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<InlineResponse2004>>("/recipes/informationBulk", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeInformationBulk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Recipe Information Bulk Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of recipe ids.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InlineResponse2004&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2004>> GetRecipeInformationBulkAsync(string ids, bool? includeNutrition = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<List<InlineResponse2004>> localVarResponse = await GetRecipeInformationBulkWithHttpInfoAsync(ids, includeNutrition, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Recipe Information Bulk Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of recipe ids.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2004&gt;)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<List<InlineResponse2004>>> GetRecipeInformationBulkWithHttpInfoAsync(string ids, bool? includeNutrition = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new Spoonacular.Client.ApiException(400, "Missing required parameter 'ids' when calling RecipesApi->GetRecipeInformationBulk");
            }


            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            if (includeNutrition != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeNutrition", includeNutrition));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<InlineResponse2004>>("/recipes/informationBulk", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeInformationBulk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ingredients by ID Get a recipe&#39;s ingredient list.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 GetRecipeIngredientsByID(int id)
        {
            Spoonacular.Client.ApiResponse<InlineResponse20011> localVarResponse = GetRecipeIngredientsByIDWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ingredients by ID Get a recipe&#39;s ingredient list.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public Spoonacular.Client.ApiResponse<InlineResponse20011> GetRecipeIngredientsByIDWithHttpInfo(int id)
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse20011>("/recipes/{id}/ingredientWidget.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeIngredientsByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ingredients by ID Get a recipe&#39;s ingredient list.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> GetRecipeIngredientsByIDAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<InlineResponse20011> localVarResponse = await GetRecipeIngredientsByIDWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ingredients by ID Get a recipe&#39;s ingredient list.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<InlineResponse20011>> GetRecipeIngredientsByIDWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20011>("/recipes/{id}/ingredientWidget.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeIngredientsByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Nutrition by ID Get a recipe&#39;s nutrition data.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 GetRecipeNutritionWidgetByID(int id)
        {
            Spoonacular.Client.ApiResponse<InlineResponse20012> localVarResponse = GetRecipeNutritionWidgetByIDWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Nutrition by ID Get a recipe&#39;s nutrition data.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public Spoonacular.Client.ApiResponse<InlineResponse20012> GetRecipeNutritionWidgetByIDWithHttpInfo(int id)
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse20012>("/recipes/{id}/nutritionWidget.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeNutritionWidgetByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Nutrition by ID Get a recipe&#39;s nutrition data.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012> GetRecipeNutritionWidgetByIDAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<InlineResponse20012> localVarResponse = await GetRecipeNutritionWidgetByIDWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Nutrition by ID Get a recipe&#39;s nutrition data.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<InlineResponse20012>> GetRecipeNutritionWidgetByIDWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20012>("/recipes/{id}/nutritionWidget.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeNutritionWidgetByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Price Breakdown by ID Get a recipe&#39;s price breakdown data.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 GetRecipePriceBreakdownByID(int id)
        {
            Spoonacular.Client.ApiResponse<InlineResponse20010> localVarResponse = GetRecipePriceBreakdownByIDWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Price Breakdown by ID Get a recipe&#39;s price breakdown data.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public Spoonacular.Client.ApiResponse<InlineResponse20010> GetRecipePriceBreakdownByIDWithHttpInfo(int id)
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse20010>("/recipes/{id}/priceBreakdownWidget.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipePriceBreakdownByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Price Breakdown by ID Get a recipe&#39;s price breakdown data.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010> GetRecipePriceBreakdownByIDAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<InlineResponse20010> localVarResponse = await GetRecipePriceBreakdownByIDWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Price Breakdown by ID Get a recipe&#39;s price breakdown data.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<InlineResponse20010>> GetRecipePriceBreakdownByIDWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20010>("/recipes/{id}/priceBreakdownWidget.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipePriceBreakdownByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Taste by ID Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional, default to true)</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 GetRecipeTasteByID(int id, bool? normalize = default(bool?))
        {
            Spoonacular.Client.ApiResponse<InlineResponse2008> localVarResponse = GetRecipeTasteByIDWithHttpInfo(id, normalize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Taste by ID Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional, default to true)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public Spoonacular.Client.ApiResponse<InlineResponse2008> GetRecipeTasteByIDWithHttpInfo(int id, bool? normalize = default(bool?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (normalize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "normalize", normalize));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2008>("/recipes/{id}/tasteWidget.json", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeTasteByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Taste by ID Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> GetRecipeTasteByIDAsync(int id, bool? normalize = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<InlineResponse2008> localVarResponse = await GetRecipeTasteByIDWithHttpInfoAsync(id, normalize, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Taste by ID Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<InlineResponse2008>> GetRecipeTasteByIDWithHttpInfoAsync(int id, bool? normalize = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (normalize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "normalize", normalize));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2008>("/recipes/{id}/tasteWidget.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeTasteByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Similar Recipes Find recipes which are similar to the given one.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <returns>List&lt;InlineResponse2005&gt;</returns>
        public List<InlineResponse2005> GetSimilarRecipes(int id, int? number = default(int?), bool? limitLicense = default(bool?))
        {
            Spoonacular.Client.ApiResponse<List<InlineResponse2005>> localVarResponse = GetSimilarRecipesWithHttpInfo(id, number, limitLicense);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Similar Recipes Find recipes which are similar to the given one.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2005&gt;</returns>
        public Spoonacular.Client.ApiResponse<List<InlineResponse2005>> GetSimilarRecipesWithHttpInfo(int id, int? number = default(int?), bool? limitLicense = default(bool?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<InlineResponse2005>>("/recipes/{id}/similar", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSimilarRecipes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Similar Recipes Find recipes which are similar to the given one.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InlineResponse2005&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2005>> GetSimilarRecipesAsync(int id, int? number = default(int?), bool? limitLicense = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<List<InlineResponse2005>> localVarResponse = await GetSimilarRecipesWithHttpInfoAsync(id, number, limitLicense, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Similar Recipes Find recipes which are similar to the given one.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2005&gt;)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<List<InlineResponse2005>>> GetSimilarRecipesWithHttpInfoAsync(int id, int? number = default(int?), bool? limitLicense = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<InlineResponse2005>>("/recipes/{id}/similar", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSimilarRecipes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Guess Nutrition by Dish Name Estimate the macronutrients of a dish based on its title.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the dish.</param>
        /// <returns>InlineResponse20021</returns>
        public InlineResponse20021 GuessNutritionByDishName(string title)
        {
            Spoonacular.Client.ApiResponse<InlineResponse20021> localVarResponse = GuessNutritionByDishNameWithHttpInfo(title);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Guess Nutrition by Dish Name Estimate the macronutrients of a dish based on its title.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the dish.</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        public Spoonacular.Client.ApiResponse<InlineResponse20021> GuessNutritionByDishNameWithHttpInfo(string title)
        {
            // verify the required parameter 'title' is set
            if (title == null)
            {
                throw new Spoonacular.Client.ApiException(400, "Missing required parameter 'title' when calling RecipesApi->GuessNutritionByDishName");
            }

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "title", title));

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse20021>("/recipes/guessNutrition", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GuessNutritionByDishName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Guess Nutrition by Dish Name Estimate the macronutrients of a dish based on its title.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the dish.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20021</returns>
        public async System.Threading.Tasks.Task<InlineResponse20021> GuessNutritionByDishNameAsync(string title, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<InlineResponse20021> localVarResponse = await GuessNutritionByDishNameWithHttpInfoAsync(title, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Guess Nutrition by Dish Name Estimate the macronutrients of a dish based on its title.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the dish.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<InlineResponse20021>> GuessNutritionByDishNameWithHttpInfoAsync(string title, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'title' is set
            if (title == null)
            {
                throw new Spoonacular.Client.ApiException(400, "Missing required parameter 'title' when calling RecipesApi->GuessNutritionByDishName");
            }


            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "title", title));

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20021>("/recipes/guessNutrition", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GuessNutritionByDishName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ingredients by ID Image Visualize a recipe&#39;s ingredient list.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <returns>Object</returns>
        public Object IngredientsByIDImage(decimal id, string? measure = default(string?))
        {
            Spoonacular.Client.ApiResponse<Object> localVarResponse = IngredientsByIDImageWithHttpInfo(id, measure);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ingredients by ID Image Visualize a recipe&#39;s ingredient list.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Spoonacular.Client.ApiResponse<Object> IngredientsByIDImageWithHttpInfo(decimal id, string? measure = default(string?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (measure != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "measure", measure));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/recipes/{id}/ingredientWidget.png", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IngredientsByIDImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ingredients by ID Image Visualize a recipe&#39;s ingredient list.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> IngredientsByIDImageAsync(decimal id, string? measure = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<Object> localVarResponse = await IngredientsByIDImageWithHttpInfoAsync(id, measure, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ingredients by ID Image Visualize a recipe&#39;s ingredient list.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<Object>> IngredientsByIDImageWithHttpInfoAsync(decimal id, string? measure = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (measure != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "measure", measure));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/recipes/{id}/ingredientWidget.png", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IngredientsByIDImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Parse Ingredients Extract an ingredient from plain text.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <returns>List&lt;InlineResponse20020&gt;</returns>
        public List<InlineResponse20020> ParseIngredients(string? contentType = default(string?), string? language = default(string?))
        {
            Spoonacular.Client.ApiResponse<List<InlineResponse20020>> localVarResponse = ParseIngredientsWithHttpInfo(contentType, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Parse Ingredients Extract an ingredient from plain text.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse20020&gt;</returns>
        public Spoonacular.Client.ApiResponse<List<InlineResponse20020>> ParseIngredientsWithHttpInfo(string? contentType = default(string?), string? language = default(string?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", Spoonacular.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<InlineResponse20020>>("/recipes/parseIngredients", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParseIngredients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Parse Ingredients Extract an ingredient from plain text.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InlineResponse20020&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20020>> ParseIngredientsAsync(string? contentType = default(string?), string? language = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<List<InlineResponse20020>> localVarResponse = await ParseIngredientsWithHttpInfoAsync(contentType, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Parse Ingredients Extract an ingredient from plain text.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20020&gt;)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<List<InlineResponse20020>>> ParseIngredientsWithHttpInfoAsync(string? contentType = default(string?), string? language = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", Spoonacular.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<InlineResponse20020>>("/recipes/parseIngredients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParseIngredients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Price Breakdown by ID Image Visualize a recipe&#39;s price breakdown.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <returns>Object</returns>
        public Object PriceBreakdownByIDImage(decimal id)
        {
            Spoonacular.Client.ApiResponse<Object> localVarResponse = PriceBreakdownByIDImageWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Price Breakdown by ID Image Visualize a recipe&#39;s price breakdown.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <returns>ApiResponse of Object</returns>
        public Spoonacular.Client.ApiResponse<Object> PriceBreakdownByIDImageWithHttpInfo(decimal id)
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/recipes/{id}/priceBreakdownWidget.png", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceBreakdownByIDImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Price Breakdown by ID Image Visualize a recipe&#39;s price breakdown.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PriceBreakdownByIDImageAsync(decimal id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<Object> localVarResponse = await PriceBreakdownByIDImageWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Price Breakdown by ID Image Visualize a recipe&#39;s price breakdown.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<Object>> PriceBreakdownByIDImageWithHttpInfoAsync(decimal id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/recipes/{id}/priceBreakdownWidget.png", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PriceBreakdownByIDImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Nutrition by ID Image Visualize a recipe&#39;s nutritional information as an image.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <returns>Object</returns>
        public Object RecipeNutritionByIDImage(decimal id)
        {
            Spoonacular.Client.ApiResponse<Object> localVarResponse = RecipeNutritionByIDImageWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Nutrition by ID Image Visualize a recipe&#39;s nutritional information as an image.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <returns>ApiResponse of Object</returns>
        public Spoonacular.Client.ApiResponse<Object> RecipeNutritionByIDImageWithHttpInfo(decimal id)
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/recipes/{id}/nutritionWidget.png", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecipeNutritionByIDImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Nutrition by ID Image Visualize a recipe&#39;s nutritional information as an image.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RecipeNutritionByIDImageAsync(decimal id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<Object> localVarResponse = await RecipeNutritionByIDImageWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Nutrition by ID Image Visualize a recipe&#39;s nutritional information as an image.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<Object>> RecipeNutritionByIDImageWithHttpInfoAsync(decimal id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/recipes/{id}/nutritionWidget.png", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecipeNutritionByIDImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Nutrition Label Image Get a recipe&#39;s nutrition label as an image.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <returns>Object</returns>
        public Object RecipeNutritionLabelImage(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?))
        {
            Spoonacular.Client.ApiResponse<Object> localVarResponse = RecipeNutritionLabelImageWithHttpInfo(id, showOptionalNutrients, showZeroValues, showIngredients);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Nutrition Label Image Get a recipe&#39;s nutrition label as an image.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Spoonacular.Client.ApiResponse<Object> RecipeNutritionLabelImageWithHttpInfo(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (showOptionalNutrients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showOptionalNutrients", showOptionalNutrients));
            }
            if (showZeroValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showZeroValues", showZeroValues));
            }
            if (showIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showIngredients", showIngredients));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/recipes/{id}/nutritionLabel.png", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecipeNutritionLabelImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Nutrition Label Image Get a recipe&#39;s nutrition label as an image.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RecipeNutritionLabelImageAsync(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<Object> localVarResponse = await RecipeNutritionLabelImageWithHttpInfoAsync(id, showOptionalNutrients, showZeroValues, showIngredients, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Nutrition Label Image Get a recipe&#39;s nutrition label as an image.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<Object>> RecipeNutritionLabelImageWithHttpInfoAsync(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (showOptionalNutrients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showOptionalNutrients", showOptionalNutrients));
            }
            if (showZeroValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showZeroValues", showZeroValues));
            }
            if (showIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showIngredients", showIngredients));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/recipes/{id}/nutritionLabel.png", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecipeNutritionLabelImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Nutrition Label Widget Get a recipe&#39;s nutrition label as an HTML widget.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <returns>string</returns>
        public string RecipeNutritionLabelWidget(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?))
        {
            Spoonacular.Client.ApiResponse<string> localVarResponse = RecipeNutritionLabelWidgetWithHttpInfo(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Nutrition Label Widget Get a recipe&#39;s nutrition label as an HTML widget.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Spoonacular.Client.ApiResponse<string> RecipeNutritionLabelWidgetWithHttpInfo(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }
            if (showOptionalNutrients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showOptionalNutrients", showOptionalNutrients));
            }
            if (showZeroValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showZeroValues", showZeroValues));
            }
            if (showIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showIngredients", showIngredients));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/recipes/{id}/nutritionLabel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecipeNutritionLabelWidget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Nutrition Label Widget Get a recipe&#39;s nutrition label as an HTML widget.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> RecipeNutritionLabelWidgetAsync(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<string> localVarResponse = await RecipeNutritionLabelWidgetWithHttpInfoAsync(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Nutrition Label Widget Get a recipe&#39;s nutrition label as an HTML widget.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<string>> RecipeNutritionLabelWidgetWithHttpInfoAsync(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }
            if (showOptionalNutrients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showOptionalNutrients", showOptionalNutrients));
            }
            if (showZeroValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showZeroValues", showZeroValues));
            }
            if (showIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showIngredients", showIngredients));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/recipes/{id}/nutritionLabel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecipeNutritionLabelWidget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Taste by ID Image Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <returns>Object</returns>
        public Object RecipeTasteByIDImage(decimal id, bool? normalize = default(bool?), string? rgb = default(string?))
        {
            Spoonacular.Client.ApiResponse<Object> localVarResponse = RecipeTasteByIDImageWithHttpInfo(id, normalize, rgb);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Taste by ID Image Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Spoonacular.Client.ApiResponse<Object> RecipeTasteByIDImageWithHttpInfo(decimal id, bool? normalize = default(bool?), string? rgb = default(string?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (normalize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "normalize", normalize));
            }
            if (rgb != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "rgb", rgb));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/recipes/{id}/tasteWidget.png", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecipeTasteByIDImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Taste by ID Image Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RecipeTasteByIDImageAsync(decimal id, bool? normalize = default(bool?), string? rgb = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<Object> localVarResponse = await RecipeTasteByIDImageWithHttpInfoAsync(id, normalize, rgb, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Taste by ID Image Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="normalize">Normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<Object>> RecipeTasteByIDImageWithHttpInfoAsync(decimal id, bool? normalize = default(bool?), string? rgb = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (normalize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "normalize", normalize));
            }
            if (rgb != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "rgb", rgb));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/recipes/{id}/tasteWidget.png", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecipeTasteByIDImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Recipes Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="excludeCuisine">The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="type">The type of recipe. See a full list of supported meal types. (optional)</param>
        /// <param name="instructionsRequired">Whether the recipes must have instructions. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="addRecipeNutrition">If set to true, you get nutritional information about each recipes returned. (optional)</param>
        /// <param name="author">The username of the recipe author. (optional)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="recipeBoxId">The id of the recipe box to which the search should be limited to. (optional)</param>
        /// <param name="titleMatch">Enter text that must be found in the title of the recipes. (optional)</param>
        /// <param name="maxReadyTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 SearchRecipes(string? query = default(string?), string? cuisine = default(string?), string? excludeCuisine = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), string? type = default(string?), bool? instructionsRequired = default(bool?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), bool? addRecipeNutrition = default(bool?), string? author = default(string?), string? tags = default(string?), decimal? recipeBoxId = default(decimal?), string? titleMatch = default(string?), decimal? maxReadyTime = default(decimal?), bool? ignorePantry = default(bool?), string? sort = default(string?), string? sortDirection = default(string?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? limitLicense = default(bool?))
        {
            Spoonacular.Client.ApiResponse<InlineResponse200> localVarResponse = SearchRecipesWithHttpInfo(query, cuisine, excludeCuisine, diet, intolerances, equipment, includeIngredients, excludeIngredients, type, instructionsRequired, fillIngredients, addRecipeInformation, addRecipeNutrition, author, tags, recipeBoxId, titleMatch, maxReadyTime, ignorePantry, sort, sortDirection, minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, limitLicense);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Recipes Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="excludeCuisine">The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="type">The type of recipe. See a full list of supported meal types. (optional)</param>
        /// <param name="instructionsRequired">Whether the recipes must have instructions. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="addRecipeNutrition">If set to true, you get nutritional information about each recipes returned. (optional)</param>
        /// <param name="author">The username of the recipe author. (optional)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="recipeBoxId">The id of the recipe box to which the search should be limited to. (optional)</param>
        /// <param name="titleMatch">Enter text that must be found in the title of the recipes. (optional)</param>
        /// <param name="maxReadyTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public Spoonacular.Client.ApiResponse<InlineResponse200> SearchRecipesWithHttpInfo(string? query = default(string?), string? cuisine = default(string?), string? excludeCuisine = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), string? type = default(string?), bool? instructionsRequired = default(bool?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), bool? addRecipeNutrition = default(bool?), string? author = default(string?), string? tags = default(string?), decimal? recipeBoxId = default(decimal?), string? titleMatch = default(string?), decimal? maxReadyTime = default(decimal?), bool? ignorePantry = default(bool?), string? sort = default(string?), string? sortDirection = default(string?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? limitLicense = default(bool?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (cuisine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "cuisine", cuisine));
            }
            if (excludeCuisine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "excludeCuisine", excludeCuisine));
            }
            if (diet != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "diet", diet));
            }
            if (intolerances != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "intolerances", intolerances));
            }
            if (equipment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "equipment", equipment));
            }
            if (includeIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeIngredients", includeIngredients));
            }
            if (excludeIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "excludeIngredients", excludeIngredients));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (instructionsRequired != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "instructionsRequired", instructionsRequired));
            }
            if (fillIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "fillIngredients", fillIngredients));
            }
            if (addRecipeInformation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "addRecipeInformation", addRecipeInformation));
            }
            if (addRecipeNutrition != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "addRecipeNutrition", addRecipeNutrition));
            }
            if (author != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "author", author));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (recipeBoxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "recipeBoxId", recipeBoxId));
            }
            if (titleMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "titleMatch", titleMatch));
            }
            if (maxReadyTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxReadyTime", maxReadyTime));
            }
            if (ignorePantry != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ignorePantry", ignorePantry));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sortDirection", sortDirection));
            }
            if (minCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCarbs", minCarbs));
            }
            if (maxCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCarbs", maxCarbs));
            }
            if (minProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minProtein", minProtein));
            }
            if (maxProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxProtein", maxProtein));
            }
            if (minCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalories", minCalories));
            }
            if (maxCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalories", maxCalories));
            }
            if (minFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFat", minFat));
            }
            if (maxFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFat", maxFat));
            }
            if (minAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minAlcohol", minAlcohol));
            }
            if (maxAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxAlcohol", maxAlcohol));
            }
            if (minCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCaffeine", minCaffeine));
            }
            if (maxCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCaffeine", maxCaffeine));
            }
            if (minCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCopper", minCopper));
            }
            if (maxCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCopper", maxCopper));
            }
            if (minCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalcium", minCalcium));
            }
            if (maxCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalcium", maxCalcium));
            }
            if (minCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCholine", minCholine));
            }
            if (maxCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCholine", maxCholine));
            }
            if (minCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCholesterol", minCholesterol));
            }
            if (maxCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCholesterol", maxCholesterol));
            }
            if (minFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFluoride", minFluoride));
            }
            if (maxFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFluoride", maxFluoride));
            }
            if (minSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSaturatedFat", minSaturatedFat));
            }
            if (maxSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSaturatedFat", maxSaturatedFat));
            }
            if (minVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminA", minVitaminA));
            }
            if (maxVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminA", maxVitaminA));
            }
            if (minVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminC", minVitaminC));
            }
            if (maxVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminC", maxVitaminC));
            }
            if (minVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminD", minVitaminD));
            }
            if (maxVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminD", maxVitaminD));
            }
            if (minVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminE", minVitaminE));
            }
            if (maxVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminE", maxVitaminE));
            }
            if (minVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminK", minVitaminK));
            }
            if (maxVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminK", maxVitaminK));
            }
            if (minVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB1", minVitaminB1));
            }
            if (maxVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB1", maxVitaminB1));
            }
            if (minVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB2", minVitaminB2));
            }
            if (maxVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB2", maxVitaminB2));
            }
            if (minVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB5", minVitaminB5));
            }
            if (maxVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB5", maxVitaminB5));
            }
            if (minVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB3", minVitaminB3));
            }
            if (maxVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB3", maxVitaminB3));
            }
            if (minVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB6", minVitaminB6));
            }
            if (maxVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB6", maxVitaminB6));
            }
            if (minVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB12", minVitaminB12));
            }
            if (maxVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB12", maxVitaminB12));
            }
            if (minFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFiber", minFiber));
            }
            if (maxFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFiber", maxFiber));
            }
            if (minFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFolate", minFolate));
            }
            if (maxFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFolate", maxFolate));
            }
            if (minFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFolicAcid", minFolicAcid));
            }
            if (maxFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFolicAcid", maxFolicAcid));
            }
            if (minIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minIodine", minIodine));
            }
            if (maxIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxIodine", maxIodine));
            }
            if (minIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minIron", minIron));
            }
            if (maxIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxIron", maxIron));
            }
            if (minMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minMagnesium", minMagnesium));
            }
            if (maxMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxMagnesium", maxMagnesium));
            }
            if (minManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minManganese", minManganese));
            }
            if (maxManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxManganese", maxManganese));
            }
            if (minPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minPhosphorus", minPhosphorus));
            }
            if (maxPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPhosphorus", maxPhosphorus));
            }
            if (minPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minPotassium", minPotassium));
            }
            if (maxPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPotassium", maxPotassium));
            }
            if (minSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSelenium", minSelenium));
            }
            if (maxSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSelenium", maxSelenium));
            }
            if (minSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSodium", minSodium));
            }
            if (maxSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSodium", maxSodium));
            }
            if (minSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSugar", minSugar));
            }
            if (maxSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSugar", maxSugar));
            }
            if (minZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minZinc", minZinc));
            }
            if (maxZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxZinc", maxZinc));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse200>("/recipes/complexSearch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRecipes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Recipes Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="excludeCuisine">The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="type">The type of recipe. See a full list of supported meal types. (optional)</param>
        /// <param name="instructionsRequired">Whether the recipes must have instructions. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="addRecipeNutrition">If set to true, you get nutritional information about each recipes returned. (optional)</param>
        /// <param name="author">The username of the recipe author. (optional)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="recipeBoxId">The id of the recipe box to which the search should be limited to. (optional)</param>
        /// <param name="titleMatch">Enter text that must be found in the title of the recipes. (optional)</param>
        /// <param name="maxReadyTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> SearchRecipesAsync(string? query = default(string?), string? cuisine = default(string?), string? excludeCuisine = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), string? type = default(string?), bool? instructionsRequired = default(bool?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), bool? addRecipeNutrition = default(bool?), string? author = default(string?), string? tags = default(string?), decimal? recipeBoxId = default(decimal?), string? titleMatch = default(string?), decimal? maxReadyTime = default(decimal?), bool? ignorePantry = default(bool?), string? sort = default(string?), string? sortDirection = default(string?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? limitLicense = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<InlineResponse200> localVarResponse = await SearchRecipesWithHttpInfoAsync(query, cuisine, excludeCuisine, diet, intolerances, equipment, includeIngredients, excludeIngredients, type, instructionsRequired, fillIngredients, addRecipeInformation, addRecipeNutrition, author, tags, recipeBoxId, titleMatch, maxReadyTime, ignorePantry, sort, sortDirection, minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, limitLicense, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Recipes Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="excludeCuisine">The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="type">The type of recipe. See a full list of supported meal types. (optional)</param>
        /// <param name="instructionsRequired">Whether the recipes must have instructions. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="addRecipeNutrition">If set to true, you get nutritional information about each recipes returned. (optional)</param>
        /// <param name="author">The username of the recipe author. (optional)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="recipeBoxId">The id of the recipe box to which the search should be limited to. (optional)</param>
        /// <param name="titleMatch">Enter text that must be found in the title of the recipes. (optional)</param>
        /// <param name="maxReadyTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<InlineResponse200>> SearchRecipesWithHttpInfoAsync(string? query = default(string?), string? cuisine = default(string?), string? excludeCuisine = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), string? type = default(string?), bool? instructionsRequired = default(bool?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), bool? addRecipeNutrition = default(bool?), string? author = default(string?), string? tags = default(string?), decimal? recipeBoxId = default(decimal?), string? titleMatch = default(string?), decimal? maxReadyTime = default(decimal?), bool? ignorePantry = default(bool?), string? sort = default(string?), string? sortDirection = default(string?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? limitLicense = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (cuisine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "cuisine", cuisine));
            }
            if (excludeCuisine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "excludeCuisine", excludeCuisine));
            }
            if (diet != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "diet", diet));
            }
            if (intolerances != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "intolerances", intolerances));
            }
            if (equipment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "equipment", equipment));
            }
            if (includeIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeIngredients", includeIngredients));
            }
            if (excludeIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "excludeIngredients", excludeIngredients));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (instructionsRequired != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "instructionsRequired", instructionsRequired));
            }
            if (fillIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "fillIngredients", fillIngredients));
            }
            if (addRecipeInformation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "addRecipeInformation", addRecipeInformation));
            }
            if (addRecipeNutrition != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "addRecipeNutrition", addRecipeNutrition));
            }
            if (author != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "author", author));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (recipeBoxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "recipeBoxId", recipeBoxId));
            }
            if (titleMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "titleMatch", titleMatch));
            }
            if (maxReadyTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxReadyTime", maxReadyTime));
            }
            if (ignorePantry != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ignorePantry", ignorePantry));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sortDirection", sortDirection));
            }
            if (minCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCarbs", minCarbs));
            }
            if (maxCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCarbs", maxCarbs));
            }
            if (minProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minProtein", minProtein));
            }
            if (maxProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxProtein", maxProtein));
            }
            if (minCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalories", minCalories));
            }
            if (maxCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalories", maxCalories));
            }
            if (minFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFat", minFat));
            }
            if (maxFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFat", maxFat));
            }
            if (minAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minAlcohol", minAlcohol));
            }
            if (maxAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxAlcohol", maxAlcohol));
            }
            if (minCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCaffeine", minCaffeine));
            }
            if (maxCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCaffeine", maxCaffeine));
            }
            if (minCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCopper", minCopper));
            }
            if (maxCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCopper", maxCopper));
            }
            if (minCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalcium", minCalcium));
            }
            if (maxCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalcium", maxCalcium));
            }
            if (minCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCholine", minCholine));
            }
            if (maxCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCholine", maxCholine));
            }
            if (minCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCholesterol", minCholesterol));
            }
            if (maxCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCholesterol", maxCholesterol));
            }
            if (minFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFluoride", minFluoride));
            }
            if (maxFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFluoride", maxFluoride));
            }
            if (minSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSaturatedFat", minSaturatedFat));
            }
            if (maxSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSaturatedFat", maxSaturatedFat));
            }
            if (minVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminA", minVitaminA));
            }
            if (maxVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminA", maxVitaminA));
            }
            if (minVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminC", minVitaminC));
            }
            if (maxVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminC", maxVitaminC));
            }
            if (minVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminD", minVitaminD));
            }
            if (maxVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminD", maxVitaminD));
            }
            if (minVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminE", minVitaminE));
            }
            if (maxVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminE", maxVitaminE));
            }
            if (minVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminK", minVitaminK));
            }
            if (maxVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminK", maxVitaminK));
            }
            if (minVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB1", minVitaminB1));
            }
            if (maxVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB1", maxVitaminB1));
            }
            if (minVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB2", minVitaminB2));
            }
            if (maxVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB2", maxVitaminB2));
            }
            if (minVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB5", minVitaminB5));
            }
            if (maxVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB5", maxVitaminB5));
            }
            if (minVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB3", minVitaminB3));
            }
            if (maxVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB3", maxVitaminB3));
            }
            if (minVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB6", minVitaminB6));
            }
            if (maxVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB6", maxVitaminB6));
            }
            if (minVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB12", minVitaminB12));
            }
            if (maxVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB12", maxVitaminB12));
            }
            if (minFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFiber", minFiber));
            }
            if (maxFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFiber", maxFiber));
            }
            if (minFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFolate", minFolate));
            }
            if (maxFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFolate", maxFolate));
            }
            if (minFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFolicAcid", minFolicAcid));
            }
            if (maxFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFolicAcid", maxFolicAcid));
            }
            if (minIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minIodine", minIodine));
            }
            if (maxIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxIodine", maxIodine));
            }
            if (minIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minIron", minIron));
            }
            if (maxIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxIron", maxIron));
            }
            if (minMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minMagnesium", minMagnesium));
            }
            if (maxMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxMagnesium", maxMagnesium));
            }
            if (minManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minManganese", minManganese));
            }
            if (maxManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxManganese", maxManganese));
            }
            if (minPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minPhosphorus", minPhosphorus));
            }
            if (maxPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPhosphorus", maxPhosphorus));
            }
            if (minPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minPotassium", minPotassium));
            }
            if (maxPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPotassium", maxPotassium));
            }
            if (minSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSelenium", minSelenium));
            }
            if (maxSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSelenium", maxSelenium));
            }
            if (minSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSodium", minSodium));
            }
            if (maxSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSodium", maxSodium));
            }
            if (minSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSugar", minSugar));
            }
            if (maxSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSugar", maxSugar));
            }
            if (minZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minZinc", minZinc));
            }
            if (maxZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxZinc", maxZinc));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse200>("/recipes/complexSearch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRecipes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Recipes by Ingredients  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="ranking">Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <returns>List&lt;InlineResponse2001&gt;</returns>
        public List<InlineResponse2001> SearchRecipesByIngredients(string? ingredients = default(string?), int? number = default(int?), bool? limitLicense = default(bool?), decimal? ranking = default(decimal?), bool? ignorePantry = default(bool?))
        {
            Spoonacular.Client.ApiResponse<List<InlineResponse2001>> localVarResponse = SearchRecipesByIngredientsWithHttpInfo(ingredients, number, limitLicense, ranking, ignorePantry);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Recipes by Ingredients  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="ranking">Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2001&gt;</returns>
        public Spoonacular.Client.ApiResponse<List<InlineResponse2001>> SearchRecipesByIngredientsWithHttpInfo(string? ingredients = default(string?), int? number = default(int?), bool? limitLicense = default(bool?), decimal? ranking = default(decimal?), bool? ignorePantry = default(bool?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ingredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ingredients", ingredients));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }
            if (ranking != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ranking", ranking));
            }
            if (ignorePantry != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ignorePantry", ignorePantry));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<InlineResponse2001>>("/recipes/findByIngredients", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRecipesByIngredients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Recipes by Ingredients  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="ranking">Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InlineResponse2001&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2001>> SearchRecipesByIngredientsAsync(string? ingredients = default(string?), int? number = default(int?), bool? limitLicense = default(bool?), decimal? ranking = default(decimal?), bool? ignorePantry = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<List<InlineResponse2001>> localVarResponse = await SearchRecipesByIngredientsWithHttpInfoAsync(ingredients, number, limitLicense, ranking, ignorePantry, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Recipes by Ingredients  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="ranking">Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2001&gt;)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<List<InlineResponse2001>>> SearchRecipesByIngredientsWithHttpInfoAsync(string? ingredients = default(string?), int? number = default(int?), bool? limitLicense = default(bool?), decimal? ranking = default(decimal?), bool? ignorePantry = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ingredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ingredients", ingredients));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }
            if (ranking != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ranking", ranking));
            }
            if (ignorePantry != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ignorePantry", ignorePantry));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<InlineResponse2001>>("/recipes/findByIngredients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRecipesByIngredients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Recipes by Nutrients Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="random">If true, every request will give you a random set of recipes within the requested limits. (optional)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <returns>List&lt;InlineResponse2002&gt;</returns>
        public List<InlineResponse2002> SearchRecipesByNutrients(decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? random = default(bool?), bool? limitLicense = default(bool?))
        {
            Spoonacular.Client.ApiResponse<List<InlineResponse2002>> localVarResponse = SearchRecipesByNutrientsWithHttpInfo(minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, random, limitLicense);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Recipes by Nutrients Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="random">If true, every request will give you a random set of recipes within the requested limits. (optional)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2002&gt;</returns>
        public Spoonacular.Client.ApiResponse<List<InlineResponse2002>> SearchRecipesByNutrientsWithHttpInfo(decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? random = default(bool?), bool? limitLicense = default(bool?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (minCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCarbs", minCarbs));
            }
            if (maxCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCarbs", maxCarbs));
            }
            if (minProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minProtein", minProtein));
            }
            if (maxProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxProtein", maxProtein));
            }
            if (minCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalories", minCalories));
            }
            if (maxCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalories", maxCalories));
            }
            if (minFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFat", minFat));
            }
            if (maxFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFat", maxFat));
            }
            if (minAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minAlcohol", minAlcohol));
            }
            if (maxAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxAlcohol", maxAlcohol));
            }
            if (minCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCaffeine", minCaffeine));
            }
            if (maxCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCaffeine", maxCaffeine));
            }
            if (minCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCopper", minCopper));
            }
            if (maxCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCopper", maxCopper));
            }
            if (minCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalcium", minCalcium));
            }
            if (maxCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalcium", maxCalcium));
            }
            if (minCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCholine", minCholine));
            }
            if (maxCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCholine", maxCholine));
            }
            if (minCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCholesterol", minCholesterol));
            }
            if (maxCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCholesterol", maxCholesterol));
            }
            if (minFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFluoride", minFluoride));
            }
            if (maxFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFluoride", maxFluoride));
            }
            if (minSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSaturatedFat", minSaturatedFat));
            }
            if (maxSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSaturatedFat", maxSaturatedFat));
            }
            if (minVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminA", minVitaminA));
            }
            if (maxVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminA", maxVitaminA));
            }
            if (minVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminC", minVitaminC));
            }
            if (maxVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminC", maxVitaminC));
            }
            if (minVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminD", minVitaminD));
            }
            if (maxVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminD", maxVitaminD));
            }
            if (minVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminE", minVitaminE));
            }
            if (maxVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminE", maxVitaminE));
            }
            if (minVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminK", minVitaminK));
            }
            if (maxVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminK", maxVitaminK));
            }
            if (minVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB1", minVitaminB1));
            }
            if (maxVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB1", maxVitaminB1));
            }
            if (minVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB2", minVitaminB2));
            }
            if (maxVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB2", maxVitaminB2));
            }
            if (minVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB5", minVitaminB5));
            }
            if (maxVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB5", maxVitaminB5));
            }
            if (minVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB3", minVitaminB3));
            }
            if (maxVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB3", maxVitaminB3));
            }
            if (minVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB6", minVitaminB6));
            }
            if (maxVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB6", maxVitaminB6));
            }
            if (minVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB12", minVitaminB12));
            }
            if (maxVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB12", maxVitaminB12));
            }
            if (minFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFiber", minFiber));
            }
            if (maxFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFiber", maxFiber));
            }
            if (minFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFolate", minFolate));
            }
            if (maxFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFolate", maxFolate));
            }
            if (minFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFolicAcid", minFolicAcid));
            }
            if (maxFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFolicAcid", maxFolicAcid));
            }
            if (minIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minIodine", minIodine));
            }
            if (maxIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxIodine", maxIodine));
            }
            if (minIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minIron", minIron));
            }
            if (maxIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxIron", maxIron));
            }
            if (minMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minMagnesium", minMagnesium));
            }
            if (maxMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxMagnesium", maxMagnesium));
            }
            if (minManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minManganese", minManganese));
            }
            if (maxManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxManganese", maxManganese));
            }
            if (minPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minPhosphorus", minPhosphorus));
            }
            if (maxPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPhosphorus", maxPhosphorus));
            }
            if (minPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minPotassium", minPotassium));
            }
            if (maxPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPotassium", maxPotassium));
            }
            if (minSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSelenium", minSelenium));
            }
            if (maxSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSelenium", maxSelenium));
            }
            if (minSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSodium", minSodium));
            }
            if (maxSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSodium", maxSodium));
            }
            if (minSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSugar", minSugar));
            }
            if (maxSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSugar", maxSugar));
            }
            if (minZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minZinc", minZinc));
            }
            if (maxZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxZinc", maxZinc));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (random != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "random", random));
            }
            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<InlineResponse2002>>("/recipes/findByNutrients", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRecipesByNutrients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Recipes by Nutrients Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="random">If true, every request will give you a random set of recipes within the requested limits. (optional)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InlineResponse2002&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2002>> SearchRecipesByNutrientsAsync(decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? random = default(bool?), bool? limitLicense = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<List<InlineResponse2002>> localVarResponse = await SearchRecipesByNutrientsWithHttpInfoAsync(minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, random, limitLicense, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Recipes by Nutrients Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="random">If true, every request will give you a random set of recipes within the requested limits. (optional)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2002&gt;)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<List<InlineResponse2002>>> SearchRecipesByNutrientsWithHttpInfoAsync(decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? random = default(bool?), bool? limitLicense = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (minCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCarbs", minCarbs));
            }
            if (maxCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCarbs", maxCarbs));
            }
            if (minProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minProtein", minProtein));
            }
            if (maxProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxProtein", maxProtein));
            }
            if (minCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalories", minCalories));
            }
            if (maxCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalories", maxCalories));
            }
            if (minFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFat", minFat));
            }
            if (maxFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFat", maxFat));
            }
            if (minAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minAlcohol", minAlcohol));
            }
            if (maxAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxAlcohol", maxAlcohol));
            }
            if (minCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCaffeine", minCaffeine));
            }
            if (maxCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCaffeine", maxCaffeine));
            }
            if (minCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCopper", minCopper));
            }
            if (maxCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCopper", maxCopper));
            }
            if (minCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalcium", minCalcium));
            }
            if (maxCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalcium", maxCalcium));
            }
            if (minCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCholine", minCholine));
            }
            if (maxCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCholine", maxCholine));
            }
            if (minCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCholesterol", minCholesterol));
            }
            if (maxCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCholesterol", maxCholesterol));
            }
            if (minFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFluoride", minFluoride));
            }
            if (maxFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFluoride", maxFluoride));
            }
            if (minSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSaturatedFat", minSaturatedFat));
            }
            if (maxSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSaturatedFat", maxSaturatedFat));
            }
            if (minVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminA", minVitaminA));
            }
            if (maxVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminA", maxVitaminA));
            }
            if (minVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminC", minVitaminC));
            }
            if (maxVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminC", maxVitaminC));
            }
            if (minVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminD", minVitaminD));
            }
            if (maxVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminD", maxVitaminD));
            }
            if (minVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminE", minVitaminE));
            }
            if (maxVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminE", maxVitaminE));
            }
            if (minVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminK", minVitaminK));
            }
            if (maxVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminK", maxVitaminK));
            }
            if (minVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB1", minVitaminB1));
            }
            if (maxVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB1", maxVitaminB1));
            }
            if (minVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB2", minVitaminB2));
            }
            if (maxVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB2", maxVitaminB2));
            }
            if (minVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB5", minVitaminB5));
            }
            if (maxVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB5", maxVitaminB5));
            }
            if (minVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB3", minVitaminB3));
            }
            if (maxVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB3", maxVitaminB3));
            }
            if (minVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB6", minVitaminB6));
            }
            if (maxVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB6", maxVitaminB6));
            }
            if (minVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB12", minVitaminB12));
            }
            if (maxVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB12", maxVitaminB12));
            }
            if (minFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFiber", minFiber));
            }
            if (maxFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFiber", maxFiber));
            }
            if (minFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFolate", minFolate));
            }
            if (maxFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFolate", maxFolate));
            }
            if (minFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFolicAcid", minFolicAcid));
            }
            if (maxFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFolicAcid", maxFolicAcid));
            }
            if (minIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minIodine", minIodine));
            }
            if (maxIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxIodine", maxIodine));
            }
            if (minIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minIron", minIron));
            }
            if (maxIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxIron", maxIron));
            }
            if (minMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minMagnesium", minMagnesium));
            }
            if (maxMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxMagnesium", maxMagnesium));
            }
            if (minManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minManganese", minManganese));
            }
            if (maxManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxManganese", maxManganese));
            }
            if (minPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minPhosphorus", minPhosphorus));
            }
            if (maxPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPhosphorus", maxPhosphorus));
            }
            if (minPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minPotassium", minPotassium));
            }
            if (maxPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPotassium", maxPotassium));
            }
            if (minSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSelenium", minSelenium));
            }
            if (maxSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSelenium", maxSelenium));
            }
            if (minSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSodium", minSodium));
            }
            if (maxSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSodium", maxSodium));
            }
            if (minSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSugar", minSugar));
            }
            if (maxSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSugar", maxSugar));
            }
            if (minZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minZinc", minZinc));
            }
            if (maxZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxZinc", maxZinc));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (random != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "random", random));
            }
            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<InlineResponse2002>>("/recipes/findByNutrients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRecipesByNutrients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summarize Recipe Automatically generate a short description that summarizes key information about the recipe.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 SummarizeRecipe(int id)
        {
            Spoonacular.Client.ApiResponse<InlineResponse20014> localVarResponse = SummarizeRecipeWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Summarize Recipe Automatically generate a short description that summarizes key information about the recipe.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public Spoonacular.Client.ApiResponse<InlineResponse20014> SummarizeRecipeWithHttpInfo(int id)
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse20014>("/recipes/{id}/summary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summarize Recipe Automatically generate a short description that summarizes key information about the recipe.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014> SummarizeRecipeAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<InlineResponse20014> localVarResponse = await SummarizeRecipeWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Summarize Recipe Automatically generate a short description that summarizes key information about the recipe.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<InlineResponse20014>> SummarizeRecipeWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20014>("/recipes/{id}/summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Equipment Widget Visualize the equipment used to make a recipe.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <returns>string</returns>
        public string VisualizeEquipment(string? contentType = default(string?), string? accept = default(string?))
        {
            Spoonacular.Client.ApiResponse<string> localVarResponse = VisualizeEquipmentWithHttpInfo(contentType, accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Equipment Widget Visualize the equipment used to make a recipe.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Spoonacular.Client.ApiResponse<string> VisualizeEquipmentWithHttpInfo(string? contentType = default(string?), string? accept = default(string?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", Spoonacular.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", Spoonacular.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/recipes/visualizeEquipment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeEquipment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Equipment Widget Visualize the equipment used to make a recipe.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VisualizeEquipmentAsync(string? contentType = default(string?), string? accept = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<string> localVarResponse = await VisualizeEquipmentWithHttpInfoAsync(contentType, accept, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Equipment Widget Visualize the equipment used to make a recipe.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<string>> VisualizeEquipmentWithHttpInfoAsync(string? contentType = default(string?), string? accept = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", Spoonacular.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", Spoonacular.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/recipes/visualizeEquipment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeEquipment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Price Breakdown Widget Visualize the price breakdown of a recipe.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <returns>string</returns>
        public string VisualizePriceBreakdown(string? contentType = default(string?), string? accept = default(string?), string? language = default(string?))
        {
            Spoonacular.Client.ApiResponse<string> localVarResponse = VisualizePriceBreakdownWithHttpInfo(contentType, accept, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Price Breakdown Widget Visualize the price breakdown of a recipe.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Spoonacular.Client.ApiResponse<string> VisualizePriceBreakdownWithHttpInfo(string? contentType = default(string?), string? accept = default(string?), string? language = default(string?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", Spoonacular.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", Spoonacular.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/recipes/visualizePriceEstimator", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizePriceBreakdown", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Price Breakdown Widget Visualize the price breakdown of a recipe.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VisualizePriceBreakdownAsync(string? contentType = default(string?), string? accept = default(string?), string? language = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<string> localVarResponse = await VisualizePriceBreakdownWithHttpInfoAsync(contentType, accept, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Price Breakdown Widget Visualize the price breakdown of a recipe.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<string>> VisualizePriceBreakdownWithHttpInfoAsync(string? contentType = default(string?), string? accept = default(string?), string? language = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", Spoonacular.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", Spoonacular.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/recipes/visualizePriceEstimator", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizePriceBreakdown", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Equipment by ID Widget Visualize a recipe&#39;s equipment list.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <returns>string</returns>
        public string VisualizeRecipeEquipmentByID(int id, bool? defaultCss = default(bool?))
        {
            Spoonacular.Client.ApiResponse<string> localVarResponse = VisualizeRecipeEquipmentByIDWithHttpInfo(id, defaultCss);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Equipment by ID Widget Visualize a recipe&#39;s equipment list.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <returns>ApiResponse of string</returns>
        public Spoonacular.Client.ApiResponse<string> VisualizeRecipeEquipmentByIDWithHttpInfo(int id, bool? defaultCss = default(bool?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/recipes/{id}/equipmentWidget", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipeEquipmentByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Equipment by ID Widget Visualize a recipe&#39;s equipment list.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VisualizeRecipeEquipmentByIDAsync(int id, bool? defaultCss = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<string> localVarResponse = await VisualizeRecipeEquipmentByIDWithHttpInfoAsync(id, defaultCss, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Equipment by ID Widget Visualize a recipe&#39;s equipment list.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<string>> VisualizeRecipeEquipmentByIDWithHttpInfoAsync(int id, bool? defaultCss = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/recipes/{id}/equipmentWidget", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipeEquipmentByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ingredients by ID Widget Visualize a recipe&#39;s ingredient list.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <returns>string</returns>
        public string VisualizeRecipeIngredientsByID(int id, bool? defaultCss = default(bool?), string? measure = default(string?))
        {
            Spoonacular.Client.ApiResponse<string> localVarResponse = VisualizeRecipeIngredientsByIDWithHttpInfo(id, defaultCss, measure);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ingredients by ID Widget Visualize a recipe&#39;s ingredient list.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Spoonacular.Client.ApiResponse<string> VisualizeRecipeIngredientsByIDWithHttpInfo(int id, bool? defaultCss = default(bool?), string? measure = default(string?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }
            if (measure != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "measure", measure));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/recipes/{id}/ingredientWidget", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipeIngredientsByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ingredients by ID Widget Visualize a recipe&#39;s ingredient list.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VisualizeRecipeIngredientsByIDAsync(int id, bool? defaultCss = default(bool?), string? measure = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<string> localVarResponse = await VisualizeRecipeIngredientsByIDWithHttpInfoAsync(id, defaultCss, measure, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ingredients by ID Widget Visualize a recipe&#39;s ingredient list.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="measure">Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<string>> VisualizeRecipeIngredientsByIDWithHttpInfoAsync(int id, bool? defaultCss = default(bool?), string? measure = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }
            if (measure != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "measure", measure));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/recipes/{id}/ingredientWidget", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipeIngredientsByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Nutrition Widget Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <returns>string</returns>
        public string VisualizeRecipeNutrition(string? contentType = default(string?), string? accept = default(string?), string? language = default(string?))
        {
            Spoonacular.Client.ApiResponse<string> localVarResponse = VisualizeRecipeNutritionWithHttpInfo(contentType, accept, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Nutrition Widget Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Spoonacular.Client.ApiResponse<string> VisualizeRecipeNutritionWithHttpInfo(string? contentType = default(string?), string? accept = default(string?), string? language = default(string?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", Spoonacular.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", Spoonacular.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/recipes/visualizeNutrition", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipeNutrition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Nutrition Widget Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VisualizeRecipeNutritionAsync(string? contentType = default(string?), string? accept = default(string?), string? language = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<string> localVarResponse = await VisualizeRecipeNutritionWithHttpInfoAsync(contentType, accept, language, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Nutrition Widget Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<string>> VisualizeRecipeNutritionWithHttpInfoAsync(string? contentType = default(string?), string? accept = default(string?), string? language = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", Spoonacular.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", Spoonacular.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/recipes/visualizeNutrition", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipeNutrition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Nutrition by ID Widget Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <returns>string</returns>
        public string VisualizeRecipeNutritionByID(int id, bool? defaultCss = default(bool?), string? accept = default(string?))
        {
            Spoonacular.Client.ApiResponse<string> localVarResponse = VisualizeRecipeNutritionByIDWithHttpInfo(id, defaultCss, accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Nutrition by ID Widget Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Spoonacular.Client.ApiResponse<string> VisualizeRecipeNutritionByIDWithHttpInfo(int id, bool? defaultCss = default(bool?), string? accept = default(string?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", Spoonacular.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/recipes/{id}/nutritionWidget", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipeNutritionByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Nutrition by ID Widget Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VisualizeRecipeNutritionByIDAsync(int id, bool? defaultCss = default(bool?), string? accept = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<string> localVarResponse = await VisualizeRecipeNutritionByIDWithHttpInfoAsync(id, defaultCss, accept, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Nutrition by ID Widget Visualize a recipe&#39;s nutritional information as HTML including CSS.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<string>> VisualizeRecipeNutritionByIDWithHttpInfoAsync(int id, bool? defaultCss = default(bool?), string? accept = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", Spoonacular.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/recipes/{id}/nutritionWidget", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipeNutritionByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Price Breakdown by ID Widget Visualize a recipe&#39;s price breakdown.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <returns>string</returns>
        public string VisualizeRecipePriceBreakdownByID(int id, bool? defaultCss = default(bool?))
        {
            Spoonacular.Client.ApiResponse<string> localVarResponse = VisualizeRecipePriceBreakdownByIDWithHttpInfo(id, defaultCss);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Price Breakdown by ID Widget Visualize a recipe&#39;s price breakdown.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <returns>ApiResponse of string</returns>
        public Spoonacular.Client.ApiResponse<string> VisualizeRecipePriceBreakdownByIDWithHttpInfo(int id, bool? defaultCss = default(bool?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/recipes/{id}/priceBreakdownWidget", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipePriceBreakdownByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Price Breakdown by ID Widget Visualize a recipe&#39;s price breakdown.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VisualizeRecipePriceBreakdownByIDAsync(int id, bool? defaultCss = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<string> localVarResponse = await VisualizeRecipePriceBreakdownByIDWithHttpInfoAsync(id, defaultCss, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Price Breakdown by ID Widget Visualize a recipe&#39;s price breakdown.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<string>> VisualizeRecipePriceBreakdownByIDWithHttpInfoAsync(int id, bool? defaultCss = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/recipes/{id}/priceBreakdownWidget", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipePriceBreakdownByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Taste Widget Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="normalize">Whether to normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <returns>string</returns>
        public string VisualizeRecipeTaste(string? language = default(string?), string? contentType = default(string?), string? accept = default(string?), bool? normalize = default(bool?), string? rgb = default(string?))
        {
            Spoonacular.Client.ApiResponse<string> localVarResponse = VisualizeRecipeTasteWithHttpInfo(language, contentType, accept, normalize, rgb);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Taste Widget Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="normalize">Whether to normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Spoonacular.Client.ApiResponse<string> VisualizeRecipeTasteWithHttpInfo(string? language = default(string?), string? contentType = default(string?), string? accept = default(string?), bool? normalize = default(bool?), string? rgb = default(string?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (normalize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "normalize", normalize));
            }
            if (rgb != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "rgb", rgb));
            }
            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", Spoonacular.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", Spoonacular.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/recipes/visualizeTaste", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipeTaste", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Taste Widget Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="normalize">Whether to normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VisualizeRecipeTasteAsync(string? language = default(string?), string? contentType = default(string?), string? accept = default(string?), bool? normalize = default(bool?), string? rgb = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<string> localVarResponse = await VisualizeRecipeTasteWithHttpInfoAsync(language, contentType, accept, normalize, rgb, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Taste Widget Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)</param>
        /// <param name="contentType">The content type. (optional)</param>
        /// <param name="accept">Accept header. (optional)</param>
        /// <param name="normalize">Whether to normalize to the strongest taste. (optional)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<string>> VisualizeRecipeTasteWithHttpInfoAsync(string? language = default(string?), string? contentType = default(string?), string? accept = default(string?), bool? normalize = default(bool?), string? rgb = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (normalize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "normalize", normalize));
            }
            if (rgb != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "rgb", rgb));
            }
            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", Spoonacular.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", Spoonacular.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/recipes/visualizeTaste", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipeTaste", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Taste by ID Widget Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Whether to normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <returns>string</returns>
        public string VisualizeRecipeTasteByID(int id, bool? normalize = default(bool?), string? rgb = default(string?))
        {
            Spoonacular.Client.ApiResponse<string> localVarResponse = VisualizeRecipeTasteByIDWithHttpInfo(id, normalize, rgb);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Taste by ID Widget Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Whether to normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Spoonacular.Client.ApiResponse<string> VisualizeRecipeTasteByIDWithHttpInfo(int id, bool? normalize = default(bool?), string? rgb = default(string?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (normalize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "normalize", normalize));
            }
            if (rgb != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "rgb", rgb));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/recipes/{id}/tasteWidget", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipeTasteByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Taste by ID Widget Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Whether to normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> VisualizeRecipeTasteByIDAsync(int id, bool? normalize = default(bool?), string? rgb = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<string> localVarResponse = await VisualizeRecipeTasteByIDWithHttpInfoAsync(id, normalize, rgb, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Taste by ID Widget Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="normalize">Whether to normalize to the strongest taste. (optional, default to true)</param>
        /// <param name="rgb">Red, green, blue values for the chart color. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<string>> VisualizeRecipeTasteByIDWithHttpInfoAsync(int id, bool? normalize = default(bool?), string? rgb = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (normalize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "normalize", normalize));
            }
            if (rgb != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "rgb", rgb));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/recipes/{id}/tasteWidget", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VisualizeRecipeTasteByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
