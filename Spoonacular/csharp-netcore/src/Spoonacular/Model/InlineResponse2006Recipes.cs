/*
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Spoonacular.Client.OpenAPIDateConverter;

namespace Spoonacular.Model
{
    /// <summary>
    /// InlineResponse2006Recipes
    /// </summary>
    [DataContract(Name = "inline_response_200_6_recipes")]
    public partial class InlineResponse2006Recipes : IEquatable<InlineResponse2006Recipes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2006Recipes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineResponse2006Recipes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2006Recipes" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="title">title (required).</param>
        /// <param name="image">image (required).</param>
        /// <param name="imageType">imageType (required).</param>
        /// <param name="servings">servings (required).</param>
        /// <param name="readyInMinutes">readyInMinutes (required).</param>
        /// <param name="license">license (required).</param>
        /// <param name="sourceName">sourceName (required).</param>
        /// <param name="sourceUrl">sourceUrl (required).</param>
        /// <param name="spoonacularSourceUrl">spoonacularSourceUrl (required).</param>
        /// <param name="aggregateLikes">aggregateLikes (required).</param>
        /// <param name="healthScore">healthScore (required).</param>
        /// <param name="spoonacularScore">spoonacularScore (required).</param>
        /// <param name="pricePerServing">pricePerServing (required).</param>
        /// <param name="analyzedInstructions">analyzedInstructions.</param>
        /// <param name="cheap">cheap (required).</param>
        /// <param name="creditsText">creditsText (required).</param>
        /// <param name="cuisines">cuisines.</param>
        /// <param name="dairyFree">dairyFree (required).</param>
        /// <param name="diets">diets.</param>
        /// <param name="gaps">gaps (required).</param>
        /// <param name="glutenFree">glutenFree (required).</param>
        /// <param name="instructions">instructions (required).</param>
        /// <param name="ketogenic">ketogenic (required).</param>
        /// <param name="lowFodmap">lowFodmap (required).</param>
        /// <param name="occasions">occasions.</param>
        /// <param name="sustainable">sustainable (required).</param>
        /// <param name="vegan">vegan (required).</param>
        /// <param name="vegetarian">vegetarian (required).</param>
        /// <param name="veryHealthy">veryHealthy (required).</param>
        /// <param name="veryPopular">veryPopular (required).</param>
        /// <param name="whole30">whole30 (required).</param>
        /// <param name="weightWatcherSmartPoints">weightWatcherSmartPoints (required).</param>
        /// <param name="dishTypes">dishTypes.</param>
        /// <param name="extendedIngredients">extendedIngredients.</param>
        /// <param name="summary">summary (required).</param>
        /// <param name="winePairing">winePairing.</param>
        public InlineResponse2006Recipes(int id = default(int), string title = default(string), string image = default(string), string imageType = default(string), decimal servings = default(decimal), int readyInMinutes = default(int), string license = default(string), string sourceName = default(string), string sourceUrl = default(string), string spoonacularSourceUrl = default(string), decimal aggregateLikes = default(decimal), decimal healthScore = default(decimal), decimal spoonacularScore = default(decimal), decimal pricePerServing = default(decimal), List<Object> analyzedInstructions = default(List<Object>), bool cheap = default(bool), string creditsText = default(string), List<string> cuisines = default(List<string>), bool dairyFree = default(bool), List<string> diets = default(List<string>), string gaps = default(string), bool glutenFree = default(bool), string instructions = default(string), bool ketogenic = default(bool), bool lowFodmap = default(bool), List<string> occasions = default(List<string>), bool sustainable = default(bool), bool vegan = default(bool), bool vegetarian = default(bool), bool veryHealthy = default(bool), bool veryPopular = default(bool), bool whole30 = default(bool), decimal weightWatcherSmartPoints = default(decimal), List<string> dishTypes = default(List<string>), List<InlineResponse2003ExtendedIngredients> extendedIngredients = default(List<InlineResponse2003ExtendedIngredients>), string summary = default(string), InlineResponse2003WinePairing winePairing = default(InlineResponse2003WinePairing))
        {
            this.Id = id;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for InlineResponse2006Recipes and cannot be null");
            }
            this.Title = title;
            // to ensure "image" is required (not null)
            if (image == null)
            {
                throw new ArgumentNullException("image is a required property for InlineResponse2006Recipes and cannot be null");
            }
            this.Image = image;
            // to ensure "imageType" is required (not null)
            if (imageType == null)
            {
                throw new ArgumentNullException("imageType is a required property for InlineResponse2006Recipes and cannot be null");
            }
            this.ImageType = imageType;
            this.Servings = servings;
            this.ReadyInMinutes = readyInMinutes;
            // to ensure "license" is required (not null)
            if (license == null)
            {
                throw new ArgumentNullException("license is a required property for InlineResponse2006Recipes and cannot be null");
            }
            this.License = license;
            // to ensure "sourceName" is required (not null)
            if (sourceName == null)
            {
                throw new ArgumentNullException("sourceName is a required property for InlineResponse2006Recipes and cannot be null");
            }
            this.SourceName = sourceName;
            // to ensure "sourceUrl" is required (not null)
            if (sourceUrl == null)
            {
                throw new ArgumentNullException("sourceUrl is a required property for InlineResponse2006Recipes and cannot be null");
            }
            this.SourceUrl = sourceUrl;
            // to ensure "spoonacularSourceUrl" is required (not null)
            if (spoonacularSourceUrl == null)
            {
                throw new ArgumentNullException("spoonacularSourceUrl is a required property for InlineResponse2006Recipes and cannot be null");
            }
            this.SpoonacularSourceUrl = spoonacularSourceUrl;
            this.AggregateLikes = aggregateLikes;
            this.HealthScore = healthScore;
            this.SpoonacularScore = spoonacularScore;
            this.PricePerServing = pricePerServing;
            this.Cheap = cheap;
            // to ensure "creditsText" is required (not null)
            if (creditsText == null)
            {
                throw new ArgumentNullException("creditsText is a required property for InlineResponse2006Recipes and cannot be null");
            }
            this.CreditsText = creditsText;
            this.DairyFree = dairyFree;
            // to ensure "gaps" is required (not null)
            if (gaps == null)
            {
                throw new ArgumentNullException("gaps is a required property for InlineResponse2006Recipes and cannot be null");
            }
            this.Gaps = gaps;
            this.GlutenFree = glutenFree;
            // to ensure "instructions" is required (not null)
            if (instructions == null)
            {
                throw new ArgumentNullException("instructions is a required property for InlineResponse2006Recipes and cannot be null");
            }
            this.Instructions = instructions;
            this.Ketogenic = ketogenic;
            this.LowFodmap = lowFodmap;
            this.Sustainable = sustainable;
            this.Vegan = vegan;
            this.Vegetarian = vegetarian;
            this.VeryHealthy = veryHealthy;
            this.VeryPopular = veryPopular;
            this.Whole30 = whole30;
            this.WeightWatcherSmartPoints = weightWatcherSmartPoints;
            // to ensure "summary" is required (not null)
            if (summary == null)
            {
                throw new ArgumentNullException("summary is a required property for InlineResponse2006Recipes and cannot be null");
            }
            this.Summary = summary;
            this.AnalyzedInstructions = analyzedInstructions;
            this.Cuisines = cuisines;
            this.Diets = diets;
            this.Occasions = occasions;
            this.DishTypes = dishTypes;
            this.ExtendedIngredients = extendedIngredients;
            this.WinePairing = winePairing;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", IsRequired = true, EmitDefaultValue = false)]
        public string Image { get; set; }

        /// <summary>
        /// Gets or Sets ImageType
        /// </summary>
        [DataMember(Name = "imageType", IsRequired = true, EmitDefaultValue = false)]
        public string ImageType { get; set; }

        /// <summary>
        /// Gets or Sets Servings
        /// </summary>
        [DataMember(Name = "servings", IsRequired = true, EmitDefaultValue = false)]
        public decimal Servings { get; set; }

        /// <summary>
        /// Gets or Sets ReadyInMinutes
        /// </summary>
        [DataMember(Name = "readyInMinutes", IsRequired = true, EmitDefaultValue = false)]
        public int ReadyInMinutes { get; set; }

        /// <summary>
        /// Gets or Sets License
        /// </summary>
        [DataMember(Name = "license", IsRequired = true, EmitDefaultValue = false)]
        public string License { get; set; }

        /// <summary>
        /// Gets or Sets SourceName
        /// </summary>
        [DataMember(Name = "sourceName", IsRequired = true, EmitDefaultValue = false)]
        public string SourceName { get; set; }

        /// <summary>
        /// Gets or Sets SourceUrl
        /// </summary>
        [DataMember(Name = "sourceUrl", IsRequired = true, EmitDefaultValue = false)]
        public string SourceUrl { get; set; }

        /// <summary>
        /// Gets or Sets SpoonacularSourceUrl
        /// </summary>
        [DataMember(Name = "spoonacularSourceUrl", IsRequired = true, EmitDefaultValue = false)]
        public string SpoonacularSourceUrl { get; set; }

        /// <summary>
        /// Gets or Sets AggregateLikes
        /// </summary>
        [DataMember(Name = "aggregateLikes", IsRequired = true, EmitDefaultValue = false)]
        public decimal AggregateLikes { get; set; }

        /// <summary>
        /// Gets or Sets HealthScore
        /// </summary>
        [DataMember(Name = "healthScore", IsRequired = true, EmitDefaultValue = false)]
        public decimal HealthScore { get; set; }

        /// <summary>
        /// Gets or Sets SpoonacularScore
        /// </summary>
        [DataMember(Name = "spoonacularScore", IsRequired = true, EmitDefaultValue = false)]
        public decimal SpoonacularScore { get; set; }

        /// <summary>
        /// Gets or Sets PricePerServing
        /// </summary>
        [DataMember(Name = "pricePerServing", IsRequired = true, EmitDefaultValue = false)]
        public decimal PricePerServing { get; set; }

        /// <summary>
        /// Gets or Sets AnalyzedInstructions
        /// </summary>
        [DataMember(Name = "analyzedInstructions", EmitDefaultValue = false)]
        public List<Object> AnalyzedInstructions { get; set; }

        /// <summary>
        /// Gets or Sets Cheap
        /// </summary>
        [DataMember(Name = "cheap", IsRequired = true, EmitDefaultValue = true)]
        public bool Cheap { get; set; }

        /// <summary>
        /// Gets or Sets CreditsText
        /// </summary>
        [DataMember(Name = "creditsText", IsRequired = true, EmitDefaultValue = false)]
        public string CreditsText { get; set; }

        /// <summary>
        /// Gets or Sets Cuisines
        /// </summary>
        [DataMember(Name = "cuisines", EmitDefaultValue = false)]
        public List<string> Cuisines { get; set; }

        /// <summary>
        /// Gets or Sets DairyFree
        /// </summary>
        [DataMember(Name = "dairyFree", IsRequired = true, EmitDefaultValue = true)]
        public bool DairyFree { get; set; }

        /// <summary>
        /// Gets or Sets Diets
        /// </summary>
        [DataMember(Name = "diets", EmitDefaultValue = false)]
        public List<string> Diets { get; set; }

        /// <summary>
        /// Gets or Sets Gaps
        /// </summary>
        [DataMember(Name = "gaps", IsRequired = true, EmitDefaultValue = false)]
        public string Gaps { get; set; }

        /// <summary>
        /// Gets or Sets GlutenFree
        /// </summary>
        [DataMember(Name = "glutenFree", IsRequired = true, EmitDefaultValue = true)]
        public bool GlutenFree { get; set; }

        /// <summary>
        /// Gets or Sets Instructions
        /// </summary>
        [DataMember(Name = "instructions", IsRequired = true, EmitDefaultValue = false)]
        public string Instructions { get; set; }

        /// <summary>
        /// Gets or Sets Ketogenic
        /// </summary>
        [DataMember(Name = "ketogenic", IsRequired = true, EmitDefaultValue = true)]
        public bool Ketogenic { get; set; }

        /// <summary>
        /// Gets or Sets LowFodmap
        /// </summary>
        [DataMember(Name = "lowFodmap", IsRequired = true, EmitDefaultValue = true)]
        public bool LowFodmap { get; set; }

        /// <summary>
        /// Gets or Sets Occasions
        /// </summary>
        [DataMember(Name = "occasions", EmitDefaultValue = false)]
        public List<string> Occasions { get; set; }

        /// <summary>
        /// Gets or Sets Sustainable
        /// </summary>
        [DataMember(Name = "sustainable", IsRequired = true, EmitDefaultValue = true)]
        public bool Sustainable { get; set; }

        /// <summary>
        /// Gets or Sets Vegan
        /// </summary>
        [DataMember(Name = "vegan", IsRequired = true, EmitDefaultValue = true)]
        public bool Vegan { get; set; }

        /// <summary>
        /// Gets or Sets Vegetarian
        /// </summary>
        [DataMember(Name = "vegetarian", IsRequired = true, EmitDefaultValue = true)]
        public bool Vegetarian { get; set; }

        /// <summary>
        /// Gets or Sets VeryHealthy
        /// </summary>
        [DataMember(Name = "veryHealthy", IsRequired = true, EmitDefaultValue = true)]
        public bool VeryHealthy { get; set; }

        /// <summary>
        /// Gets or Sets VeryPopular
        /// </summary>
        [DataMember(Name = "veryPopular", IsRequired = true, EmitDefaultValue = true)]
        public bool VeryPopular { get; set; }

        /// <summary>
        /// Gets or Sets Whole30
        /// </summary>
        [DataMember(Name = "whole30", IsRequired = true, EmitDefaultValue = true)]
        public bool Whole30 { get; set; }

        /// <summary>
        /// Gets or Sets WeightWatcherSmartPoints
        /// </summary>
        [DataMember(Name = "weightWatcherSmartPoints", IsRequired = true, EmitDefaultValue = false)]
        public decimal WeightWatcherSmartPoints { get; set; }

        /// <summary>
        /// Gets or Sets DishTypes
        /// </summary>
        [DataMember(Name = "dishTypes", EmitDefaultValue = false)]
        public List<string> DishTypes { get; set; }

        /// <summary>
        /// Gets or Sets ExtendedIngredients
        /// </summary>
        [DataMember(Name = "extendedIngredients", EmitDefaultValue = false)]
        public List<InlineResponse2003ExtendedIngredients> ExtendedIngredients { get; set; }

        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [DataMember(Name = "summary", IsRequired = true, EmitDefaultValue = false)]
        public string Summary { get; set; }

        /// <summary>
        /// Gets or Sets WinePairing
        /// </summary>
        [DataMember(Name = "winePairing", EmitDefaultValue = false)]
        public InlineResponse2003WinePairing WinePairing { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2006Recipes {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  ImageType: ").Append(ImageType).Append("\n");
            sb.Append("  Servings: ").Append(Servings).Append("\n");
            sb.Append("  ReadyInMinutes: ").Append(ReadyInMinutes).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  SourceName: ").Append(SourceName).Append("\n");
            sb.Append("  SourceUrl: ").Append(SourceUrl).Append("\n");
            sb.Append("  SpoonacularSourceUrl: ").Append(SpoonacularSourceUrl).Append("\n");
            sb.Append("  AggregateLikes: ").Append(AggregateLikes).Append("\n");
            sb.Append("  HealthScore: ").Append(HealthScore).Append("\n");
            sb.Append("  SpoonacularScore: ").Append(SpoonacularScore).Append("\n");
            sb.Append("  PricePerServing: ").Append(PricePerServing).Append("\n");
            sb.Append("  AnalyzedInstructions: ").Append(AnalyzedInstructions).Append("\n");
            sb.Append("  Cheap: ").Append(Cheap).Append("\n");
            sb.Append("  CreditsText: ").Append(CreditsText).Append("\n");
            sb.Append("  Cuisines: ").Append(Cuisines).Append("\n");
            sb.Append("  DairyFree: ").Append(DairyFree).Append("\n");
            sb.Append("  Diets: ").Append(Diets).Append("\n");
            sb.Append("  Gaps: ").Append(Gaps).Append("\n");
            sb.Append("  GlutenFree: ").Append(GlutenFree).Append("\n");
            sb.Append("  Instructions: ").Append(Instructions).Append("\n");
            sb.Append("  Ketogenic: ").Append(Ketogenic).Append("\n");
            sb.Append("  LowFodmap: ").Append(LowFodmap).Append("\n");
            sb.Append("  Occasions: ").Append(Occasions).Append("\n");
            sb.Append("  Sustainable: ").Append(Sustainable).Append("\n");
            sb.Append("  Vegan: ").Append(Vegan).Append("\n");
            sb.Append("  Vegetarian: ").Append(Vegetarian).Append("\n");
            sb.Append("  VeryHealthy: ").Append(VeryHealthy).Append("\n");
            sb.Append("  VeryPopular: ").Append(VeryPopular).Append("\n");
            sb.Append("  Whole30: ").Append(Whole30).Append("\n");
            sb.Append("  WeightWatcherSmartPoints: ").Append(WeightWatcherSmartPoints).Append("\n");
            sb.Append("  DishTypes: ").Append(DishTypes).Append("\n");
            sb.Append("  ExtendedIngredients: ").Append(ExtendedIngredients).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  WinePairing: ").Append(WinePairing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2006Recipes);
        }

        /// <summary>
        /// Returns true if InlineResponse2006Recipes instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2006Recipes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2006Recipes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.ImageType == input.ImageType ||
                    (this.ImageType != null &&
                    this.ImageType.Equals(input.ImageType))
                ) && 
                (
                    this.Servings == input.Servings ||
                    this.Servings.Equals(input.Servings)
                ) && 
                (
                    this.ReadyInMinutes == input.ReadyInMinutes ||
                    this.ReadyInMinutes.Equals(input.ReadyInMinutes)
                ) && 
                (
                    this.License == input.License ||
                    (this.License != null &&
                    this.License.Equals(input.License))
                ) && 
                (
                    this.SourceName == input.SourceName ||
                    (this.SourceName != null &&
                    this.SourceName.Equals(input.SourceName))
                ) && 
                (
                    this.SourceUrl == input.SourceUrl ||
                    (this.SourceUrl != null &&
                    this.SourceUrl.Equals(input.SourceUrl))
                ) && 
                (
                    this.SpoonacularSourceUrl == input.SpoonacularSourceUrl ||
                    (this.SpoonacularSourceUrl != null &&
                    this.SpoonacularSourceUrl.Equals(input.SpoonacularSourceUrl))
                ) && 
                (
                    this.AggregateLikes == input.AggregateLikes ||
                    this.AggregateLikes.Equals(input.AggregateLikes)
                ) && 
                (
                    this.HealthScore == input.HealthScore ||
                    this.HealthScore.Equals(input.HealthScore)
                ) && 
                (
                    this.SpoonacularScore == input.SpoonacularScore ||
                    this.SpoonacularScore.Equals(input.SpoonacularScore)
                ) && 
                (
                    this.PricePerServing == input.PricePerServing ||
                    this.PricePerServing.Equals(input.PricePerServing)
                ) && 
                (
                    this.AnalyzedInstructions == input.AnalyzedInstructions ||
                    this.AnalyzedInstructions != null &&
                    input.AnalyzedInstructions != null &&
                    this.AnalyzedInstructions.SequenceEqual(input.AnalyzedInstructions)
                ) && 
                (
                    this.Cheap == input.Cheap ||
                    this.Cheap.Equals(input.Cheap)
                ) && 
                (
                    this.CreditsText == input.CreditsText ||
                    (this.CreditsText != null &&
                    this.CreditsText.Equals(input.CreditsText))
                ) && 
                (
                    this.Cuisines == input.Cuisines ||
                    this.Cuisines != null &&
                    input.Cuisines != null &&
                    this.Cuisines.SequenceEqual(input.Cuisines)
                ) && 
                (
                    this.DairyFree == input.DairyFree ||
                    this.DairyFree.Equals(input.DairyFree)
                ) && 
                (
                    this.Diets == input.Diets ||
                    this.Diets != null &&
                    input.Diets != null &&
                    this.Diets.SequenceEqual(input.Diets)
                ) && 
                (
                    this.Gaps == input.Gaps ||
                    (this.Gaps != null &&
                    this.Gaps.Equals(input.Gaps))
                ) && 
                (
                    this.GlutenFree == input.GlutenFree ||
                    this.GlutenFree.Equals(input.GlutenFree)
                ) && 
                (
                    this.Instructions == input.Instructions ||
                    (this.Instructions != null &&
                    this.Instructions.Equals(input.Instructions))
                ) && 
                (
                    this.Ketogenic == input.Ketogenic ||
                    this.Ketogenic.Equals(input.Ketogenic)
                ) && 
                (
                    this.LowFodmap == input.LowFodmap ||
                    this.LowFodmap.Equals(input.LowFodmap)
                ) && 
                (
                    this.Occasions == input.Occasions ||
                    this.Occasions != null &&
                    input.Occasions != null &&
                    this.Occasions.SequenceEqual(input.Occasions)
                ) && 
                (
                    this.Sustainable == input.Sustainable ||
                    this.Sustainable.Equals(input.Sustainable)
                ) && 
                (
                    this.Vegan == input.Vegan ||
                    this.Vegan.Equals(input.Vegan)
                ) && 
                (
                    this.Vegetarian == input.Vegetarian ||
                    this.Vegetarian.Equals(input.Vegetarian)
                ) && 
                (
                    this.VeryHealthy == input.VeryHealthy ||
                    this.VeryHealthy.Equals(input.VeryHealthy)
                ) && 
                (
                    this.VeryPopular == input.VeryPopular ||
                    this.VeryPopular.Equals(input.VeryPopular)
                ) && 
                (
                    this.Whole30 == input.Whole30 ||
                    this.Whole30.Equals(input.Whole30)
                ) && 
                (
                    this.WeightWatcherSmartPoints == input.WeightWatcherSmartPoints ||
                    this.WeightWatcherSmartPoints.Equals(input.WeightWatcherSmartPoints)
                ) && 
                (
                    this.DishTypes == input.DishTypes ||
                    this.DishTypes != null &&
                    input.DishTypes != null &&
                    this.DishTypes.SequenceEqual(input.DishTypes)
                ) && 
                (
                    this.ExtendedIngredients == input.ExtendedIngredients ||
                    this.ExtendedIngredients != null &&
                    input.ExtendedIngredients != null &&
                    this.ExtendedIngredients.SequenceEqual(input.ExtendedIngredients)
                ) && 
                (
                    this.Summary == input.Summary ||
                    (this.Summary != null &&
                    this.Summary.Equals(input.Summary))
                ) && 
                (
                    this.WinePairing == input.WinePairing ||
                    (this.WinePairing != null &&
                    this.WinePairing.Equals(input.WinePairing))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Image != null)
                {
                    hashCode = (hashCode * 59) + this.Image.GetHashCode();
                }
                if (this.ImageType != null)
                {
                    hashCode = (hashCode * 59) + this.ImageType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Servings.GetHashCode();
                hashCode = (hashCode * 59) + this.ReadyInMinutes.GetHashCode();
                if (this.License != null)
                {
                    hashCode = (hashCode * 59) + this.License.GetHashCode();
                }
                if (this.SourceName != null)
                {
                    hashCode = (hashCode * 59) + this.SourceName.GetHashCode();
                }
                if (this.SourceUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SourceUrl.GetHashCode();
                }
                if (this.SpoonacularSourceUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SpoonacularSourceUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AggregateLikes.GetHashCode();
                hashCode = (hashCode * 59) + this.HealthScore.GetHashCode();
                hashCode = (hashCode * 59) + this.SpoonacularScore.GetHashCode();
                hashCode = (hashCode * 59) + this.PricePerServing.GetHashCode();
                if (this.AnalyzedInstructions != null)
                {
                    hashCode = (hashCode * 59) + this.AnalyzedInstructions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Cheap.GetHashCode();
                if (this.CreditsText != null)
                {
                    hashCode = (hashCode * 59) + this.CreditsText.GetHashCode();
                }
                if (this.Cuisines != null)
                {
                    hashCode = (hashCode * 59) + this.Cuisines.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DairyFree.GetHashCode();
                if (this.Diets != null)
                {
                    hashCode = (hashCode * 59) + this.Diets.GetHashCode();
                }
                if (this.Gaps != null)
                {
                    hashCode = (hashCode * 59) + this.Gaps.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GlutenFree.GetHashCode();
                if (this.Instructions != null)
                {
                    hashCode = (hashCode * 59) + this.Instructions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Ketogenic.GetHashCode();
                hashCode = (hashCode * 59) + this.LowFodmap.GetHashCode();
                if (this.Occasions != null)
                {
                    hashCode = (hashCode * 59) + this.Occasions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Sustainable.GetHashCode();
                hashCode = (hashCode * 59) + this.Vegan.GetHashCode();
                hashCode = (hashCode * 59) + this.Vegetarian.GetHashCode();
                hashCode = (hashCode * 59) + this.VeryHealthy.GetHashCode();
                hashCode = (hashCode * 59) + this.VeryPopular.GetHashCode();
                hashCode = (hashCode * 59) + this.Whole30.GetHashCode();
                hashCode = (hashCode * 59) + this.WeightWatcherSmartPoints.GetHashCode();
                if (this.DishTypes != null)
                {
                    hashCode = (hashCode * 59) + this.DishTypes.GetHashCode();
                }
                if (this.ExtendedIngredients != null)
                {
                    hashCode = (hashCode * 59) + this.ExtendedIngredients.GetHashCode();
                }
                if (this.Summary != null)
                {
                    hashCode = (hashCode * 59) + this.Summary.GetHashCode();
                }
                if (this.WinePairing != null)
                {
                    hashCode = (hashCode * 59) + this.WinePairing.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Title (string) minLength
            if (this.Title != null && this.Title.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be greater than 1.", new [] { "Title" });
            }

            // Image (string) minLength
            if (this.Image != null && this.Image.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Image, length must be greater than 1.", new [] { "Image" });
            }

            // ImageType (string) minLength
            if (this.ImageType != null && this.ImageType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ImageType, length must be greater than 1.", new [] { "ImageType" });
            }

            // License (string) minLength
            if (this.License != null && this.License.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for License, length must be greater than 1.", new [] { "License" });
            }

            // SourceName (string) minLength
            if (this.SourceName != null && this.SourceName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceName, length must be greater than 1.", new [] { "SourceName" });
            }

            // SourceUrl (string) minLength
            if (this.SourceUrl != null && this.SourceUrl.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceUrl, length must be greater than 1.", new [] { "SourceUrl" });
            }

            // SpoonacularSourceUrl (string) minLength
            if (this.SpoonacularSourceUrl != null && this.SpoonacularSourceUrl.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SpoonacularSourceUrl, length must be greater than 1.", new [] { "SpoonacularSourceUrl" });
            }

            // CreditsText (string) minLength
            if (this.CreditsText != null && this.CreditsText.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreditsText, length must be greater than 1.", new [] { "CreditsText" });
            }

            // Gaps (string) minLength
            if (this.Gaps != null && this.Gaps.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Gaps, length must be greater than 1.", new [] { "Gaps" });
            }

            // Summary (string) minLength
            if (this.Summary != null && this.Summary.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Summary, length must be greater than 1.", new [] { "Summary" });
            }

            yield break;
        }
    }

}
