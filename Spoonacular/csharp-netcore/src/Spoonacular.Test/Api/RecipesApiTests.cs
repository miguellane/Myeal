/*
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Spoonacular.Client;
using Spoonacular.Api;
// uncomment below to import models
//using Spoonacular.Model;

namespace Spoonacular.Test.Api
{
    /// <summary>
    ///  Class for testing RecipesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class RecipesApiTests : IDisposable
    {
        private RecipesApi instance;

        public RecipesApiTests()
        {
            instance = new RecipesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of RecipesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' RecipesApi
            //Assert.IsType<RecipesApi>(instance);
        }

        /// <summary>
        /// Test AnalyzeARecipeSearchQuery
        /// </summary>
        [Fact]
        public void AnalyzeARecipeSearchQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //var response = instance.AnalyzeARecipeSearchQuery(q);
            //Assert.IsType<InlineResponse20018>(response);
        }

        /// <summary>
        /// Test AnalyzeRecipeInstructions
        /// </summary>
        [Fact]
        public void AnalyzeRecipeInstructionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? contentType = null;
            //var response = instance.AnalyzeRecipeInstructions(contentType);
            //Assert.IsType<InlineResponse20016>(response);
        }

        /// <summary>
        /// Test AutocompleteRecipeSearch
        /// </summary>
        [Fact]
        public void AutocompleteRecipeSearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? query = null;
            //int? number = null;
            //var response = instance.AutocompleteRecipeSearch(query, number);
            //Assert.IsType<List<InlineResponse2007>>(response);
        }

        /// <summary>
        /// Test ClassifyCuisine
        /// </summary>
        [Fact]
        public void ClassifyCuisineTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? contentType = null;
            //var response = instance.ClassifyCuisine(contentType);
            //Assert.IsType<InlineResponse20017>(response);
        }

        /// <summary>
        /// Test ConvertAmounts
        /// </summary>
        [Fact]
        public void ConvertAmountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ingredientName = null;
            //decimal sourceAmount = null;
            //string sourceUnit = null;
            //string targetUnit = null;
            //var response = instance.ConvertAmounts(ingredientName, sourceAmount, sourceUnit, targetUnit);
            //Assert.IsType<InlineResponse20019>(response);
        }

        /// <summary>
        /// Test CreateRecipeCard
        /// </summary>
        [Fact]
        public void CreateRecipeCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? contentType = null;
            //var response = instance.CreateRecipeCard(contentType);
            //Assert.IsType<InlineResponse20015>(response);
        }

        /// <summary>
        /// Test EquipmentByIDImage
        /// </summary>
        [Fact]
        public void EquipmentByIDImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal id = null;
            //var response = instance.EquipmentByIDImage(id);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ExtractRecipeFromWebsite
        /// </summary>
        [Fact]
        public void ExtractRecipeFromWebsiteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string url = null;
            //bool? forceExtraction = null;
            //bool? analyze = null;
            //bool? includeNutrition = null;
            //bool? includeTaste = null;
            //var response = instance.ExtractRecipeFromWebsite(url, forceExtraction, analyze, includeNutrition, includeTaste);
            //Assert.IsType<InlineResponse2003>(response);
        }

        /// <summary>
        /// Test GetAnalyzedRecipeInstructions
        /// </summary>
        [Fact]
        public void GetAnalyzedRecipeInstructionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //bool? stepBreakdown = null;
            //var response = instance.GetAnalyzedRecipeInstructions(id, stepBreakdown);
            //Assert.IsType<InlineResponse20013>(response);
        }

        /// <summary>
        /// Test GetRandomRecipes
        /// </summary>
        [Fact]
        public void GetRandomRecipesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? limitLicense = null;
            //string? tags = null;
            //int? number = null;
            //var response = instance.GetRandomRecipes(limitLicense, tags, number);
            //Assert.IsType<InlineResponse2006>(response);
        }

        /// <summary>
        /// Test GetRecipeEquipmentByID
        /// </summary>
        [Fact]
        public void GetRecipeEquipmentByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.GetRecipeEquipmentByID(id);
            //Assert.IsType<InlineResponse2009>(response);
        }

        /// <summary>
        /// Test GetRecipeInformation
        /// </summary>
        [Fact]
        public void GetRecipeInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //bool? includeNutrition = null;
            //var response = instance.GetRecipeInformation(id, includeNutrition);
            //Assert.IsType<InlineResponse2003>(response);
        }

        /// <summary>
        /// Test GetRecipeInformationBulk
        /// </summary>
        [Fact]
        public void GetRecipeInformationBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ids = null;
            //bool? includeNutrition = null;
            //var response = instance.GetRecipeInformationBulk(ids, includeNutrition);
            //Assert.IsType<List<InlineResponse2004>>(response);
        }

        /// <summary>
        /// Test GetRecipeIngredientsByID
        /// </summary>
        [Fact]
        public void GetRecipeIngredientsByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.GetRecipeIngredientsByID(id);
            //Assert.IsType<InlineResponse20011>(response);
        }

        /// <summary>
        /// Test GetRecipeNutritionWidgetByID
        /// </summary>
        [Fact]
        public void GetRecipeNutritionWidgetByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.GetRecipeNutritionWidgetByID(id);
            //Assert.IsType<InlineResponse20012>(response);
        }

        /// <summary>
        /// Test GetRecipePriceBreakdownByID
        /// </summary>
        [Fact]
        public void GetRecipePriceBreakdownByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.GetRecipePriceBreakdownByID(id);
            //Assert.IsType<InlineResponse20010>(response);
        }

        /// <summary>
        /// Test GetRecipeTasteByID
        /// </summary>
        [Fact]
        public void GetRecipeTasteByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //bool? normalize = null;
            //var response = instance.GetRecipeTasteByID(id, normalize);
            //Assert.IsType<InlineResponse2008>(response);
        }

        /// <summary>
        /// Test GetSimilarRecipes
        /// </summary>
        [Fact]
        public void GetSimilarRecipesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //int? number = null;
            //bool? limitLicense = null;
            //var response = instance.GetSimilarRecipes(id, number, limitLicense);
            //Assert.IsType<List<InlineResponse2005>>(response);
        }

        /// <summary>
        /// Test GuessNutritionByDishName
        /// </summary>
        [Fact]
        public void GuessNutritionByDishNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string title = null;
            //var response = instance.GuessNutritionByDishName(title);
            //Assert.IsType<InlineResponse20021>(response);
        }

        /// <summary>
        /// Test IngredientsByIDImage
        /// </summary>
        [Fact]
        public void IngredientsByIDImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal id = null;
            //string? measure = null;
            //var response = instance.IngredientsByIDImage(id, measure);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ParseIngredients
        /// </summary>
        [Fact]
        public void ParseIngredientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? contentType = null;
            //string? language = null;
            //var response = instance.ParseIngredients(contentType, language);
            //Assert.IsType<List<InlineResponse20020>>(response);
        }

        /// <summary>
        /// Test PriceBreakdownByIDImage
        /// </summary>
        [Fact]
        public void PriceBreakdownByIDImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal id = null;
            //var response = instance.PriceBreakdownByIDImage(id);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RecipeNutritionByIDImage
        /// </summary>
        [Fact]
        public void RecipeNutritionByIDImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal id = null;
            //var response = instance.RecipeNutritionByIDImage(id);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RecipeNutritionLabelImage
        /// </summary>
        [Fact]
        public void RecipeNutritionLabelImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal id = null;
            //bool? showOptionalNutrients = null;
            //bool? showZeroValues = null;
            //bool? showIngredients = null;
            //var response = instance.RecipeNutritionLabelImage(id, showOptionalNutrients, showZeroValues, showIngredients);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RecipeNutritionLabelWidget
        /// </summary>
        [Fact]
        public void RecipeNutritionLabelWidgetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal id = null;
            //bool? defaultCss = null;
            //bool? showOptionalNutrients = null;
            //bool? showZeroValues = null;
            //bool? showIngredients = null;
            //var response = instance.RecipeNutritionLabelWidget(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test RecipeTasteByIDImage
        /// </summary>
        [Fact]
        public void RecipeTasteByIDImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal id = null;
            //bool? normalize = null;
            //string? rgb = null;
            //var response = instance.RecipeTasteByIDImage(id, normalize, rgb);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test SearchRecipes
        /// </summary>
        [Fact]
        public void SearchRecipesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? query = null;
            //string? cuisine = null;
            //string? excludeCuisine = null;
            //string? diet = null;
            //string? intolerances = null;
            //string? equipment = null;
            //string? includeIngredients = null;
            //string? excludeIngredients = null;
            //string? type = null;
            //bool? instructionsRequired = null;
            //bool? fillIngredients = null;
            //bool? addRecipeInformation = null;
            //bool? addRecipeNutrition = null;
            //string? author = null;
            //string? tags = null;
            //decimal? recipeBoxId = null;
            //string? titleMatch = null;
            //decimal? maxReadyTime = null;
            //bool? ignorePantry = null;
            //string? sort = null;
            //string? sortDirection = null;
            //decimal? minCarbs = null;
            //decimal? maxCarbs = null;
            //decimal? minProtein = null;
            //decimal? maxProtein = null;
            //decimal? minCalories = null;
            //decimal? maxCalories = null;
            //decimal? minFat = null;
            //decimal? maxFat = null;
            //decimal? minAlcohol = null;
            //decimal? maxAlcohol = null;
            //decimal? minCaffeine = null;
            //decimal? maxCaffeine = null;
            //decimal? minCopper = null;
            //decimal? maxCopper = null;
            //decimal? minCalcium = null;
            //decimal? maxCalcium = null;
            //decimal? minCholine = null;
            //decimal? maxCholine = null;
            //decimal? minCholesterol = null;
            //decimal? maxCholesterol = null;
            //decimal? minFluoride = null;
            //decimal? maxFluoride = null;
            //decimal? minSaturatedFat = null;
            //decimal? maxSaturatedFat = null;
            //decimal? minVitaminA = null;
            //decimal? maxVitaminA = null;
            //decimal? minVitaminC = null;
            //decimal? maxVitaminC = null;
            //decimal? minVitaminD = null;
            //decimal? maxVitaminD = null;
            //decimal? minVitaminE = null;
            //decimal? maxVitaminE = null;
            //decimal? minVitaminK = null;
            //decimal? maxVitaminK = null;
            //decimal? minVitaminB1 = null;
            //decimal? maxVitaminB1 = null;
            //decimal? minVitaminB2 = null;
            //decimal? maxVitaminB2 = null;
            //decimal? minVitaminB5 = null;
            //decimal? maxVitaminB5 = null;
            //decimal? minVitaminB3 = null;
            //decimal? maxVitaminB3 = null;
            //decimal? minVitaminB6 = null;
            //decimal? maxVitaminB6 = null;
            //decimal? minVitaminB12 = null;
            //decimal? maxVitaminB12 = null;
            //decimal? minFiber = null;
            //decimal? maxFiber = null;
            //decimal? minFolate = null;
            //decimal? maxFolate = null;
            //decimal? minFolicAcid = null;
            //decimal? maxFolicAcid = null;
            //decimal? minIodine = null;
            //decimal? maxIodine = null;
            //decimal? minIron = null;
            //decimal? maxIron = null;
            //decimal? minMagnesium = null;
            //decimal? maxMagnesium = null;
            //decimal? minManganese = null;
            //decimal? maxManganese = null;
            //decimal? minPhosphorus = null;
            //decimal? maxPhosphorus = null;
            //decimal? minPotassium = null;
            //decimal? maxPotassium = null;
            //decimal? minSelenium = null;
            //decimal? maxSelenium = null;
            //decimal? minSodium = null;
            //decimal? maxSodium = null;
            //decimal? minSugar = null;
            //decimal? maxSugar = null;
            //decimal? minZinc = null;
            //decimal? maxZinc = null;
            //int? offset = null;
            //int? number = null;
            //bool? limitLicense = null;
            //var response = instance.SearchRecipes(query, cuisine, excludeCuisine, diet, intolerances, equipment, includeIngredients, excludeIngredients, type, instructionsRequired, fillIngredients, addRecipeInformation, addRecipeNutrition, author, tags, recipeBoxId, titleMatch, maxReadyTime, ignorePantry, sort, sortDirection, minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, limitLicense);
            //Assert.IsType<InlineResponse200>(response);
        }

        /// <summary>
        /// Test SearchRecipesByIngredients
        /// </summary>
        [Fact]
        public void SearchRecipesByIngredientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? ingredients = null;
            //int? number = null;
            //bool? limitLicense = null;
            //decimal? ranking = null;
            //bool? ignorePantry = null;
            //var response = instance.SearchRecipesByIngredients(ingredients, number, limitLicense, ranking, ignorePantry);
            //Assert.IsType<List<InlineResponse2001>>(response);
        }

        /// <summary>
        /// Test SearchRecipesByNutrients
        /// </summary>
        [Fact]
        public void SearchRecipesByNutrientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? minCarbs = null;
            //decimal? maxCarbs = null;
            //decimal? minProtein = null;
            //decimal? maxProtein = null;
            //decimal? minCalories = null;
            //decimal? maxCalories = null;
            //decimal? minFat = null;
            //decimal? maxFat = null;
            //decimal? minAlcohol = null;
            //decimal? maxAlcohol = null;
            //decimal? minCaffeine = null;
            //decimal? maxCaffeine = null;
            //decimal? minCopper = null;
            //decimal? maxCopper = null;
            //decimal? minCalcium = null;
            //decimal? maxCalcium = null;
            //decimal? minCholine = null;
            //decimal? maxCholine = null;
            //decimal? minCholesterol = null;
            //decimal? maxCholesterol = null;
            //decimal? minFluoride = null;
            //decimal? maxFluoride = null;
            //decimal? minSaturatedFat = null;
            //decimal? maxSaturatedFat = null;
            //decimal? minVitaminA = null;
            //decimal? maxVitaminA = null;
            //decimal? minVitaminC = null;
            //decimal? maxVitaminC = null;
            //decimal? minVitaminD = null;
            //decimal? maxVitaminD = null;
            //decimal? minVitaminE = null;
            //decimal? maxVitaminE = null;
            //decimal? minVitaminK = null;
            //decimal? maxVitaminK = null;
            //decimal? minVitaminB1 = null;
            //decimal? maxVitaminB1 = null;
            //decimal? minVitaminB2 = null;
            //decimal? maxVitaminB2 = null;
            //decimal? minVitaminB5 = null;
            //decimal? maxVitaminB5 = null;
            //decimal? minVitaminB3 = null;
            //decimal? maxVitaminB3 = null;
            //decimal? minVitaminB6 = null;
            //decimal? maxVitaminB6 = null;
            //decimal? minVitaminB12 = null;
            //decimal? maxVitaminB12 = null;
            //decimal? minFiber = null;
            //decimal? maxFiber = null;
            //decimal? minFolate = null;
            //decimal? maxFolate = null;
            //decimal? minFolicAcid = null;
            //decimal? maxFolicAcid = null;
            //decimal? minIodine = null;
            //decimal? maxIodine = null;
            //decimal? minIron = null;
            //decimal? maxIron = null;
            //decimal? minMagnesium = null;
            //decimal? maxMagnesium = null;
            //decimal? minManganese = null;
            //decimal? maxManganese = null;
            //decimal? minPhosphorus = null;
            //decimal? maxPhosphorus = null;
            //decimal? minPotassium = null;
            //decimal? maxPotassium = null;
            //decimal? minSelenium = null;
            //decimal? maxSelenium = null;
            //decimal? minSodium = null;
            //decimal? maxSodium = null;
            //decimal? minSugar = null;
            //decimal? maxSugar = null;
            //decimal? minZinc = null;
            //decimal? maxZinc = null;
            //int? offset = null;
            //int? number = null;
            //bool? random = null;
            //bool? limitLicense = null;
            //var response = instance.SearchRecipesByNutrients(minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, random, limitLicense);
            //Assert.IsType<List<InlineResponse2002>>(response);
        }

        /// <summary>
        /// Test SummarizeRecipe
        /// </summary>
        [Fact]
        public void SummarizeRecipeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.SummarizeRecipe(id);
            //Assert.IsType<InlineResponse20014>(response);
        }

        /// <summary>
        /// Test VisualizeEquipment
        /// </summary>
        [Fact]
        public void VisualizeEquipmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? contentType = null;
            //string? accept = null;
            //var response = instance.VisualizeEquipment(contentType, accept);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test VisualizePriceBreakdown
        /// </summary>
        [Fact]
        public void VisualizePriceBreakdownTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? contentType = null;
            //string? accept = null;
            //string? language = null;
            //var response = instance.VisualizePriceBreakdown(contentType, accept, language);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test VisualizeRecipeEquipmentByID
        /// </summary>
        [Fact]
        public void VisualizeRecipeEquipmentByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //bool? defaultCss = null;
            //var response = instance.VisualizeRecipeEquipmentByID(id, defaultCss);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test VisualizeRecipeIngredientsByID
        /// </summary>
        [Fact]
        public void VisualizeRecipeIngredientsByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //bool? defaultCss = null;
            //string? measure = null;
            //var response = instance.VisualizeRecipeIngredientsByID(id, defaultCss, measure);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test VisualizeRecipeNutrition
        /// </summary>
        [Fact]
        public void VisualizeRecipeNutritionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? contentType = null;
            //string? accept = null;
            //string? language = null;
            //var response = instance.VisualizeRecipeNutrition(contentType, accept, language);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test VisualizeRecipeNutritionByID
        /// </summary>
        [Fact]
        public void VisualizeRecipeNutritionByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //bool? defaultCss = null;
            //string? accept = null;
            //var response = instance.VisualizeRecipeNutritionByID(id, defaultCss, accept);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test VisualizeRecipePriceBreakdownByID
        /// </summary>
        [Fact]
        public void VisualizeRecipePriceBreakdownByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //bool? defaultCss = null;
            //var response = instance.VisualizeRecipePriceBreakdownByID(id, defaultCss);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test VisualizeRecipeTaste
        /// </summary>
        [Fact]
        public void VisualizeRecipeTasteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? language = null;
            //string? contentType = null;
            //string? accept = null;
            //bool? normalize = null;
            //string? rgb = null;
            //var response = instance.VisualizeRecipeTaste(language, contentType, accept, normalize, rgb);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test VisualizeRecipeTasteByID
        /// </summary>
        [Fact]
        public void VisualizeRecipeTasteByIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //bool? normalize = null;
            //string? rgb = null;
            //var response = instance.VisualizeRecipeTasteByID(id, normalize, rgb);
            //Assert.IsType<string>(response);
        }
    }
}
