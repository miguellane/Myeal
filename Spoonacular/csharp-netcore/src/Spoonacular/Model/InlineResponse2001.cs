/*
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Spoonacular.Client.OpenAPIDateConverter;

namespace Spoonacular.Model
{
    /// <summary>
    /// InlineResponse2001
    /// </summary>
    [DataContract(Name = "inline_response_200_1")]
    public partial class InlineResponse2001 : IEquatable<InlineResponse2001>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2001" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineResponse2001() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2001" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="image">image (required).</param>
        /// <param name="imageType">imageType (required).</param>
        /// <param name="likes">likes (required).</param>
        /// <param name="missedIngredientCount">missedIngredientCount (required).</param>
        /// <param name="missedIngredients">missedIngredients (required).</param>
        /// <param name="title">title (required).</param>
        /// <param name="unusedIngredients">unusedIngredients (required).</param>
        /// <param name="usedIngredientCount">usedIngredientCount (required).</param>
        /// <param name="usedIngredients">usedIngredients (required).</param>
        public InlineResponse2001(int id = default(int), string image = default(string), string imageType = default(string), int likes = default(int), int missedIngredientCount = default(int), List<RecipesFindByIngredientsMissedIngredients> missedIngredients = default(List<RecipesFindByIngredientsMissedIngredients>), string title = default(string), List<Object> unusedIngredients = default(List<Object>), decimal usedIngredientCount = default(decimal), List<RecipesFindByIngredientsMissedIngredients> usedIngredients = default(List<RecipesFindByIngredientsMissedIngredients>))
        {
            this.Id = id;
            // to ensure "image" is required (not null)
            if (image == null)
            {
                throw new ArgumentNullException("image is a required property for InlineResponse2001 and cannot be null");
            }
            this.Image = image;
            // to ensure "imageType" is required (not null)
            if (imageType == null)
            {
                throw new ArgumentNullException("imageType is a required property for InlineResponse2001 and cannot be null");
            }
            this.ImageType = imageType;
            this.Likes = likes;
            this.MissedIngredientCount = missedIngredientCount;
            // to ensure "missedIngredients" is required (not null)
            if (missedIngredients == null)
            {
                throw new ArgumentNullException("missedIngredients is a required property for InlineResponse2001 and cannot be null");
            }
            this.MissedIngredients = missedIngredients;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for InlineResponse2001 and cannot be null");
            }
            this.Title = title;
            // to ensure "unusedIngredients" is required (not null)
            if (unusedIngredients == null)
            {
                throw new ArgumentNullException("unusedIngredients is a required property for InlineResponse2001 and cannot be null");
            }
            this.UnusedIngredients = unusedIngredients;
            this.UsedIngredientCount = usedIngredientCount;
            // to ensure "usedIngredients" is required (not null)
            if (usedIngredients == null)
            {
                throw new ArgumentNullException("usedIngredients is a required property for InlineResponse2001 and cannot be null");
            }
            this.UsedIngredients = usedIngredients;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", IsRequired = true, EmitDefaultValue = false)]
        public string Image { get; set; }

        /// <summary>
        /// Gets or Sets ImageType
        /// </summary>
        [DataMember(Name = "imageType", IsRequired = true, EmitDefaultValue = false)]
        public string ImageType { get; set; }

        /// <summary>
        /// Gets or Sets Likes
        /// </summary>
        [DataMember(Name = "likes", IsRequired = true, EmitDefaultValue = false)]
        public int Likes { get; set; }

        /// <summary>
        /// Gets or Sets MissedIngredientCount
        /// </summary>
        [DataMember(Name = "missedIngredientCount", IsRequired = true, EmitDefaultValue = false)]
        public int MissedIngredientCount { get; set; }

        /// <summary>
        /// Gets or Sets MissedIngredients
        /// </summary>
        [DataMember(Name = "missedIngredients", IsRequired = true, EmitDefaultValue = false)]
        public List<RecipesFindByIngredientsMissedIngredients> MissedIngredients { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets UnusedIngredients
        /// </summary>
        [DataMember(Name = "unusedIngredients", IsRequired = true, EmitDefaultValue = false)]
        public List<Object> UnusedIngredients { get; set; }

        /// <summary>
        /// Gets or Sets UsedIngredientCount
        /// </summary>
        [DataMember(Name = "usedIngredientCount", IsRequired = true, EmitDefaultValue = false)]
        public decimal UsedIngredientCount { get; set; }

        /// <summary>
        /// Gets or Sets UsedIngredients
        /// </summary>
        [DataMember(Name = "usedIngredients", IsRequired = true, EmitDefaultValue = false)]
        public List<RecipesFindByIngredientsMissedIngredients> UsedIngredients { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse2001 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  ImageType: ").Append(ImageType).Append("\n");
            sb.Append("  Likes: ").Append(Likes).Append("\n");
            sb.Append("  MissedIngredientCount: ").Append(MissedIngredientCount).Append("\n");
            sb.Append("  MissedIngredients: ").Append(MissedIngredients).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UnusedIngredients: ").Append(UnusedIngredients).Append("\n");
            sb.Append("  UsedIngredientCount: ").Append(UsedIngredientCount).Append("\n");
            sb.Append("  UsedIngredients: ").Append(UsedIngredients).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2001);
        }

        /// <summary>
        /// Returns true if InlineResponse2001 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2001 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2001 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.ImageType == input.ImageType ||
                    (this.ImageType != null &&
                    this.ImageType.Equals(input.ImageType))
                ) && 
                (
                    this.Likes == input.Likes ||
                    this.Likes.Equals(input.Likes)
                ) && 
                (
                    this.MissedIngredientCount == input.MissedIngredientCount ||
                    this.MissedIngredientCount.Equals(input.MissedIngredientCount)
                ) && 
                (
                    this.MissedIngredients == input.MissedIngredients ||
                    this.MissedIngredients != null &&
                    input.MissedIngredients != null &&
                    this.MissedIngredients.SequenceEqual(input.MissedIngredients)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.UnusedIngredients == input.UnusedIngredients ||
                    this.UnusedIngredients != null &&
                    input.UnusedIngredients != null &&
                    this.UnusedIngredients.SequenceEqual(input.UnusedIngredients)
                ) && 
                (
                    this.UsedIngredientCount == input.UsedIngredientCount ||
                    this.UsedIngredientCount.Equals(input.UsedIngredientCount)
                ) && 
                (
                    this.UsedIngredients == input.UsedIngredients ||
                    this.UsedIngredients != null &&
                    input.UsedIngredients != null &&
                    this.UsedIngredients.SequenceEqual(input.UsedIngredients)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Image != null)
                {
                    hashCode = (hashCode * 59) + this.Image.GetHashCode();
                }
                if (this.ImageType != null)
                {
                    hashCode = (hashCode * 59) + this.ImageType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Likes.GetHashCode();
                hashCode = (hashCode * 59) + this.MissedIngredientCount.GetHashCode();
                if (this.MissedIngredients != null)
                {
                    hashCode = (hashCode * 59) + this.MissedIngredients.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.UnusedIngredients != null)
                {
                    hashCode = (hashCode * 59) + this.UnusedIngredients.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UsedIngredientCount.GetHashCode();
                if (this.UsedIngredients != null)
                {
                    hashCode = (hashCode * 59) + this.UsedIngredients.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Image (string) minLength
            if (this.Image != null && this.Image.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Image, length must be greater than 1.", new [] { "Image" });
            }

            // ImageType (string) minLength
            if (this.ImageType != null && this.ImageType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ImageType, length must be greater than 1.", new [] { "ImageType" });
            }

            // Title (string) minLength
            if (this.Title != null && this.Title.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be greater than 1.", new [] { "Title" });
            }

            yield break;
        }
    }

}
