/*
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Spoonacular.Client;
using Spoonacular.Model;

namespace Spoonacular.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecipesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Analyzed Recipe Instructions
        /// </summary>
        /// <remarks>
        /// Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="stepBreakdown">Whether to break down the recipe steps even more. (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 GetAnalyzedRecipeInstructions(int id, bool? stepBreakdown = default(bool?));

        /// <summary>
        /// Get Analyzed Recipe Instructions
        /// </summary>
        /// <remarks>
        /// Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="stepBreakdown">Whether to break down the recipe steps even more. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> GetAnalyzedRecipeInstructionsWithHttpInfo(int id, bool? stepBreakdown = default(bool?));
        /// <summary>
        /// Get Recipe Information
        /// </summary>
        /// <remarks>
        /// Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 GetRecipeInformation(int id, bool? includeNutrition = default(bool?));

        /// <summary>
        /// Get Recipe Information
        /// </summary>
        /// <remarks>
        /// Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> GetRecipeInformationWithHttpInfo(int id, bool? includeNutrition = default(bool?));
        /// <summary>
        /// Recipe Nutrition Label Image
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition label as an image.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <returns>Object</returns>
        Object RecipeNutritionLabelImage(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?));

        /// <summary>
        /// Recipe Nutrition Label Image
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition label as an image.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RecipeNutritionLabelImageWithHttpInfo(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?));
        /// <summary>
        /// Recipe Nutrition Label Widget
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition label as an HTML widget.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <returns>string</returns>
        string RecipeNutritionLabelWidget(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?));

        /// <summary>
        /// Recipe Nutrition Label Widget
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition label as an HTML widget.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> RecipeNutritionLabelWidgetWithHttpInfo(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?));
        /// <summary>
        /// Search Recipes
        /// </summary>
        /// <remarks>
        /// Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="excludeCuisine">The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="type">The type of recipe. See a full list of supported meal types. (optional)</param>
        /// <param name="instructionsRequired">Whether the recipes must have instructions. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="addRecipeNutrition">If set to true, you get nutritional information about each recipes returned. (optional)</param>
        /// <param name="author">The username of the recipe author. (optional)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="recipeBoxId">The id of the recipe box to which the search should be limited to. (optional)</param>
        /// <param name="titleMatch">Enter text that must be found in the title of the recipes. (optional)</param>
        /// <param name="maxReadyTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 SearchRecipes(string? query = default(string?), string? cuisine = default(string?), string? excludeCuisine = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), string? type = default(string?), bool? instructionsRequired = default(bool?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), bool? addRecipeNutrition = default(bool?), string? author = default(string?), string? tags = default(string?), decimal? recipeBoxId = default(decimal?), string? titleMatch = default(string?), decimal? maxReadyTime = default(decimal?), bool? ignorePantry = default(bool?), string? sort = default(string?), string? sortDirection = default(string?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? limitLicense = default(bool?));

        /// <summary>
        /// Search Recipes
        /// </summary>
        /// <remarks>
        /// Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="excludeCuisine">The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="type">The type of recipe. See a full list of supported meal types. (optional)</param>
        /// <param name="instructionsRequired">Whether the recipes must have instructions. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="addRecipeNutrition">If set to true, you get nutritional information about each recipes returned. (optional)</param>
        /// <param name="author">The username of the recipe author. (optional)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="recipeBoxId">The id of the recipe box to which the search should be limited to. (optional)</param>
        /// <param name="titleMatch">Enter text that must be found in the title of the recipes. (optional)</param>
        /// <param name="maxReadyTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> SearchRecipesWithHttpInfo(string? query = default(string?), string? cuisine = default(string?), string? excludeCuisine = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), string? type = default(string?), bool? instructionsRequired = default(bool?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), bool? addRecipeNutrition = default(bool?), string? author = default(string?), string? tags = default(string?), decimal? recipeBoxId = default(decimal?), string? titleMatch = default(string?), decimal? maxReadyTime = default(decimal?), bool? ignorePantry = default(bool?), string? sort = default(string?), string? sortDirection = default(string?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? limitLicense = default(bool?));
        /// <summary>
        /// Search Recipes by Ingredients
        /// </summary>
        /// <remarks>
        ///  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="ranking">Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <returns>List&lt;InlineResponse2001&gt;</returns>
        List<InlineResponse2001> SearchRecipesByIngredients(string? ingredients = default(string?), int? number = default(int?), bool? limitLicense = default(bool?), decimal? ranking = default(decimal?), bool? ignorePantry = default(bool?));

        /// <summary>
        /// Search Recipes by Ingredients
        /// </summary>
        /// <remarks>
        ///  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="ranking">Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2001&gt;</returns>
        ApiResponse<List<InlineResponse2001>> SearchRecipesByIngredientsWithHttpInfo(string? ingredients = default(string?), int? number = default(int?), bool? limitLicense = default(bool?), decimal? ranking = default(decimal?), bool? ignorePantry = default(bool?));
        /// <summary>
        /// Search Recipes by Nutrients
        /// </summary>
        /// <remarks>
        /// Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="random">If true, every request will give you a random set of recipes within the requested limits. (optional)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <returns>List&lt;InlineResponse2002&gt;</returns>
        List<InlineResponse2002> SearchRecipesByNutrients(decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? random = default(bool?), bool? limitLicense = default(bool?));

        /// <summary>
        /// Search Recipes by Nutrients
        /// </summary>
        /// <remarks>
        /// Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="random">If true, every request will give you a random set of recipes within the requested limits. (optional)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2002&gt;</returns>
        ApiResponse<List<InlineResponse2002>> SearchRecipesByNutrientsWithHttpInfo(decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? random = default(bool?), bool? limitLicense = default(bool?));
        /// <summary>
        /// Summarize Recipe
        /// </summary>
        /// <remarks>
        /// Automatically generate a short description that summarizes key information about the recipe.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 SummarizeRecipe(int id);

        /// <summary>
        /// Summarize Recipe
        /// </summary>
        /// <remarks>
        /// Automatically generate a short description that summarizes key information about the recipe.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> SummarizeRecipeWithHttpInfo(int id);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecipesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Analyzed Recipe Instructions
        /// </summary>
        /// <remarks>
        /// Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="stepBreakdown">Whether to break down the recipe steps even more. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> GetAnalyzedRecipeInstructionsAsync(int id, bool? stepBreakdown = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Analyzed Recipe Instructions
        /// </summary>
        /// <remarks>
        /// Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="stepBreakdown">Whether to break down the recipe steps even more. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetAnalyzedRecipeInstructionsWithHttpInfoAsync(int id, bool? stepBreakdown = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Recipe Information
        /// </summary>
        /// <remarks>
        /// Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> GetRecipeInformationAsync(int id, bool? includeNutrition = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Recipe Information
        /// </summary>
        /// <remarks>
        /// Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetRecipeInformationWithHttpInfoAsync(int id, bool? includeNutrition = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recipe Nutrition Label Image
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition label as an image.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RecipeNutritionLabelImageAsync(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recipe Nutrition Label Image
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition label as an image.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RecipeNutritionLabelImageWithHttpInfoAsync(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recipe Nutrition Label Widget
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition label as an HTML widget.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> RecipeNutritionLabelWidgetAsync(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Recipe Nutrition Label Widget
        /// </summary>
        /// <remarks>
        /// Get a recipe&#39;s nutrition label as an HTML widget.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> RecipeNutritionLabelWidgetWithHttpInfoAsync(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Recipes
        /// </summary>
        /// <remarks>
        /// Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="excludeCuisine">The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="type">The type of recipe. See a full list of supported meal types. (optional)</param>
        /// <param name="instructionsRequired">Whether the recipes must have instructions. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="addRecipeNutrition">If set to true, you get nutritional information about each recipes returned. (optional)</param>
        /// <param name="author">The username of the recipe author. (optional)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="recipeBoxId">The id of the recipe box to which the search should be limited to. (optional)</param>
        /// <param name="titleMatch">Enter text that must be found in the title of the recipes. (optional)</param>
        /// <param name="maxReadyTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> SearchRecipesAsync(string? query = default(string?), string? cuisine = default(string?), string? excludeCuisine = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), string? type = default(string?), bool? instructionsRequired = default(bool?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), bool? addRecipeNutrition = default(bool?), string? author = default(string?), string? tags = default(string?), decimal? recipeBoxId = default(decimal?), string? titleMatch = default(string?), decimal? maxReadyTime = default(decimal?), bool? ignorePantry = default(bool?), string? sort = default(string?), string? sortDirection = default(string?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? limitLicense = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Recipes
        /// </summary>
        /// <remarks>
        /// Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="excludeCuisine">The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="type">The type of recipe. See a full list of supported meal types. (optional)</param>
        /// <param name="instructionsRequired">Whether the recipes must have instructions. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="addRecipeNutrition">If set to true, you get nutritional information about each recipes returned. (optional)</param>
        /// <param name="author">The username of the recipe author. (optional)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="recipeBoxId">The id of the recipe box to which the search should be limited to. (optional)</param>
        /// <param name="titleMatch">Enter text that must be found in the title of the recipes. (optional)</param>
        /// <param name="maxReadyTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> SearchRecipesWithHttpInfoAsync(string? query = default(string?), string? cuisine = default(string?), string? excludeCuisine = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), string? type = default(string?), bool? instructionsRequired = default(bool?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), bool? addRecipeNutrition = default(bool?), string? author = default(string?), string? tags = default(string?), decimal? recipeBoxId = default(decimal?), string? titleMatch = default(string?), decimal? maxReadyTime = default(decimal?), bool? ignorePantry = default(bool?), string? sort = default(string?), string? sortDirection = default(string?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? limitLicense = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Recipes by Ingredients
        /// </summary>
        /// <remarks>
        ///  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="ranking">Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InlineResponse2001&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2001>> SearchRecipesByIngredientsAsync(string? ingredients = default(string?), int? number = default(int?), bool? limitLicense = default(bool?), decimal? ranking = default(decimal?), bool? ignorePantry = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Recipes by Ingredients
        /// </summary>
        /// <remarks>
        ///  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="ranking">Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2001&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2001>>> SearchRecipesByIngredientsWithHttpInfoAsync(string? ingredients = default(string?), int? number = default(int?), bool? limitLicense = default(bool?), decimal? ranking = default(decimal?), bool? ignorePantry = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Recipes by Nutrients
        /// </summary>
        /// <remarks>
        /// Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="random">If true, every request will give you a random set of recipes within the requested limits. (optional)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InlineResponse2002&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2002>> SearchRecipesByNutrientsAsync(decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? random = default(bool?), bool? limitLicense = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Recipes by Nutrients
        /// </summary>
        /// <remarks>
        /// Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="random">If true, every request will give you a random set of recipes within the requested limits. (optional)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2002&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2002>>> SearchRecipesByNutrientsWithHttpInfoAsync(decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? random = default(bool?), bool? limitLicense = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Summarize Recipe
        /// </summary>
        /// <remarks>
        /// Automatically generate a short description that summarizes key information about the recipe.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> SummarizeRecipeAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Summarize Recipe
        /// </summary>
        /// <remarks>
        /// Automatically generate a short description that summarizes key information about the recipe.
        /// </remarks>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> SummarizeRecipeWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecipesApi : IRecipesApiSync, IRecipesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecipesApi : IRecipesApi
    {
        private Spoonacular.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecipesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecipesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecipesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecipesApi(string basePath)
        {
            this.Configuration = Spoonacular.Client.Configuration.MergeConfigurations(
                Spoonacular.Client.GlobalConfiguration.Instance,
                new Spoonacular.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecipesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecipesApi(Spoonacular.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Spoonacular.Client.Configuration.MergeConfigurations(
                Spoonacular.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Spoonacular.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Spoonacular.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecipesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RecipesApi(Spoonacular.Client.ISynchronousClient client, Spoonacular.Client.IAsynchronousClient asyncClient, Spoonacular.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Spoonacular.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Spoonacular.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Spoonacular.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Spoonacular.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Spoonacular.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Analyzed Recipe Instructions Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="stepBreakdown">Whether to break down the recipe steps even more. (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 GetAnalyzedRecipeInstructions(int id, bool? stepBreakdown = default(bool?))
        {
            Spoonacular.Client.ApiResponse<InlineResponse2004> localVarResponse = GetAnalyzedRecipeInstructionsWithHttpInfo(id, stepBreakdown);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Analyzed Recipe Instructions Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="stepBreakdown">Whether to break down the recipe steps even more. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public Spoonacular.Client.ApiResponse<InlineResponse2004> GetAnalyzedRecipeInstructionsWithHttpInfo(int id, bool? stepBreakdown = default(bool?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (stepBreakdown != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "stepBreakdown", stepBreakdown));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2004>("/recipes/{id}/analyzedInstructions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnalyzedRecipeInstructions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Analyzed Recipe Instructions Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="stepBreakdown">Whether to break down the recipe steps even more. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> GetAnalyzedRecipeInstructionsAsync(int id, bool? stepBreakdown = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<InlineResponse2004> localVarResponse = await GetAnalyzedRecipeInstructionsWithHttpInfoAsync(id, stepBreakdown, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Analyzed Recipe Instructions Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="stepBreakdown">Whether to break down the recipe steps even more. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<InlineResponse2004>> GetAnalyzedRecipeInstructionsWithHttpInfoAsync(int id, bool? stepBreakdown = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (stepBreakdown != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "stepBreakdown", stepBreakdown));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2004>("/recipes/{id}/analyzedInstructions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnalyzedRecipeInstructions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Recipe Information Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 GetRecipeInformation(int id, bool? includeNutrition = default(bool?))
        {
            Spoonacular.Client.ApiResponse<InlineResponse2003> localVarResponse = GetRecipeInformationWithHttpInfo(id, includeNutrition);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Recipe Information Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public Spoonacular.Client.ApiResponse<InlineResponse2003> GetRecipeInformationWithHttpInfo(int id, bool? includeNutrition = default(bool?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeNutrition != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeNutrition", includeNutrition));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2003>("/recipes/{id}/information", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Recipe Information Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> GetRecipeInformationAsync(int id, bool? includeNutrition = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<InlineResponse2003> localVarResponse = await GetRecipeInformationWithHttpInfoAsync(id, includeNutrition, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Recipe Information Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="includeNutrition">Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<InlineResponse2003>> GetRecipeInformationWithHttpInfoAsync(int id, bool? includeNutrition = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeNutrition != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeNutrition", includeNutrition));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2003>("/recipes/{id}/information", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRecipeInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Nutrition Label Image Get a recipe&#39;s nutrition label as an image.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <returns>Object</returns>
        public Object RecipeNutritionLabelImage(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?))
        {
            Spoonacular.Client.ApiResponse<Object> localVarResponse = RecipeNutritionLabelImageWithHttpInfo(id, showOptionalNutrients, showZeroValues, showIngredients);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Nutrition Label Image Get a recipe&#39;s nutrition label as an image.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Spoonacular.Client.ApiResponse<Object> RecipeNutritionLabelImageWithHttpInfo(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (showOptionalNutrients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showOptionalNutrients", showOptionalNutrients));
            }
            if (showZeroValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showZeroValues", showZeroValues));
            }
            if (showIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showIngredients", showIngredients));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/recipes/{id}/nutritionLabel.png", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecipeNutritionLabelImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Nutrition Label Image Get a recipe&#39;s nutrition label as an image.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RecipeNutritionLabelImageAsync(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<Object> localVarResponse = await RecipeNutritionLabelImageWithHttpInfoAsync(id, showOptionalNutrients, showZeroValues, showIngredients, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Nutrition Label Image Get a recipe&#39;s nutrition label as an image.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<Object>> RecipeNutritionLabelImageWithHttpInfoAsync(decimal id, bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (showOptionalNutrients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showOptionalNutrients", showOptionalNutrients));
            }
            if (showZeroValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showZeroValues", showZeroValues));
            }
            if (showIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showIngredients", showIngredients));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/recipes/{id}/nutritionLabel.png", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecipeNutritionLabelImage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Nutrition Label Widget Get a recipe&#39;s nutrition label as an HTML widget.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <returns>string</returns>
        public string RecipeNutritionLabelWidget(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?))
        {
            Spoonacular.Client.ApiResponse<string> localVarResponse = RecipeNutritionLabelWidgetWithHttpInfo(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Nutrition Label Widget Get a recipe&#39;s nutrition label as an HTML widget.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Spoonacular.Client.ApiResponse<string> RecipeNutritionLabelWidgetWithHttpInfo(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }
            if (showOptionalNutrients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showOptionalNutrients", showOptionalNutrients));
            }
            if (showZeroValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showZeroValues", showZeroValues));
            }
            if (showIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showIngredients", showIngredients));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/recipes/{id}/nutritionLabel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecipeNutritionLabelWidget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recipe Nutrition Label Widget Get a recipe&#39;s nutrition label as an HTML widget.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> RecipeNutritionLabelWidgetAsync(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<string> localVarResponse = await RecipeNutritionLabelWidgetWithHttpInfoAsync(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recipe Nutrition Label Widget Get a recipe&#39;s nutrition label as an HTML widget.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The recipe id.</param>
        /// <param name="defaultCss">Whether the default CSS should be added to the response. (optional, default to true)</param>
        /// <param name="showOptionalNutrients">Whether to show optional nutrients. (optional)</param>
        /// <param name="showZeroValues">Whether to show zero values. (optional)</param>
        /// <param name="showIngredients">Whether to show a list of ingredients. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<string>> RecipeNutritionLabelWidgetWithHttpInfoAsync(decimal id, bool? defaultCss = default(bool?), bool? showOptionalNutrients = default(bool?), bool? showZeroValues = default(bool?), bool? showIngredients = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/html"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (defaultCss != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "defaultCss", defaultCss));
            }
            if (showOptionalNutrients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showOptionalNutrients", showOptionalNutrients));
            }
            if (showZeroValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showZeroValues", showZeroValues));
            }
            if (showIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "showIngredients", showIngredients));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/recipes/{id}/nutritionLabel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecipeNutritionLabelWidget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Recipes Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="excludeCuisine">The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="type">The type of recipe. See a full list of supported meal types. (optional)</param>
        /// <param name="instructionsRequired">Whether the recipes must have instructions. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="addRecipeNutrition">If set to true, you get nutritional information about each recipes returned. (optional)</param>
        /// <param name="author">The username of the recipe author. (optional)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="recipeBoxId">The id of the recipe box to which the search should be limited to. (optional)</param>
        /// <param name="titleMatch">Enter text that must be found in the title of the recipes. (optional)</param>
        /// <param name="maxReadyTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 SearchRecipes(string? query = default(string?), string? cuisine = default(string?), string? excludeCuisine = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), string? type = default(string?), bool? instructionsRequired = default(bool?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), bool? addRecipeNutrition = default(bool?), string? author = default(string?), string? tags = default(string?), decimal? recipeBoxId = default(decimal?), string? titleMatch = default(string?), decimal? maxReadyTime = default(decimal?), bool? ignorePantry = default(bool?), string? sort = default(string?), string? sortDirection = default(string?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? limitLicense = default(bool?))
        {
            Spoonacular.Client.ApiResponse<InlineResponse200> localVarResponse = SearchRecipesWithHttpInfo(query, cuisine, excludeCuisine, diet, intolerances, equipment, includeIngredients, excludeIngredients, type, instructionsRequired, fillIngredients, addRecipeInformation, addRecipeNutrition, author, tags, recipeBoxId, titleMatch, maxReadyTime, ignorePantry, sort, sortDirection, minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, limitLicense);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Recipes Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="excludeCuisine">The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="type">The type of recipe. See a full list of supported meal types. (optional)</param>
        /// <param name="instructionsRequired">Whether the recipes must have instructions. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="addRecipeNutrition">If set to true, you get nutritional information about each recipes returned. (optional)</param>
        /// <param name="author">The username of the recipe author. (optional)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="recipeBoxId">The id of the recipe box to which the search should be limited to. (optional)</param>
        /// <param name="titleMatch">Enter text that must be found in the title of the recipes. (optional)</param>
        /// <param name="maxReadyTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public Spoonacular.Client.ApiResponse<InlineResponse200> SearchRecipesWithHttpInfo(string? query = default(string?), string? cuisine = default(string?), string? excludeCuisine = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), string? type = default(string?), bool? instructionsRequired = default(bool?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), bool? addRecipeNutrition = default(bool?), string? author = default(string?), string? tags = default(string?), decimal? recipeBoxId = default(decimal?), string? titleMatch = default(string?), decimal? maxReadyTime = default(decimal?), bool? ignorePantry = default(bool?), string? sort = default(string?), string? sortDirection = default(string?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? limitLicense = default(bool?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (cuisine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "cuisine", cuisine));
            }
            if (excludeCuisine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "excludeCuisine", excludeCuisine));
            }
            if (diet != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "diet", diet));
            }
            if (intolerances != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "intolerances", intolerances));
            }
            if (equipment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "equipment", equipment));
            }
            if (includeIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeIngredients", includeIngredients));
            }
            if (excludeIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "excludeIngredients", excludeIngredients));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (instructionsRequired != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "instructionsRequired", instructionsRequired));
            }
            if (fillIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "fillIngredients", fillIngredients));
            }
            if (addRecipeInformation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "addRecipeInformation", addRecipeInformation));
            }
            if (addRecipeNutrition != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "addRecipeNutrition", addRecipeNutrition));
            }
            if (author != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "author", author));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (recipeBoxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "recipeBoxId", recipeBoxId));
            }
            if (titleMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "titleMatch", titleMatch));
            }
            if (maxReadyTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxReadyTime", maxReadyTime));
            }
            if (ignorePantry != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ignorePantry", ignorePantry));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sortDirection", sortDirection));
            }
            if (minCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCarbs", minCarbs));
            }
            if (maxCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCarbs", maxCarbs));
            }
            if (minProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minProtein", minProtein));
            }
            if (maxProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxProtein", maxProtein));
            }
            if (minCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalories", minCalories));
            }
            if (maxCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalories", maxCalories));
            }
            if (minFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFat", minFat));
            }
            if (maxFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFat", maxFat));
            }
            if (minAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minAlcohol", minAlcohol));
            }
            if (maxAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxAlcohol", maxAlcohol));
            }
            if (minCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCaffeine", minCaffeine));
            }
            if (maxCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCaffeine", maxCaffeine));
            }
            if (minCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCopper", minCopper));
            }
            if (maxCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCopper", maxCopper));
            }
            if (minCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalcium", minCalcium));
            }
            if (maxCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalcium", maxCalcium));
            }
            if (minCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCholine", minCholine));
            }
            if (maxCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCholine", maxCholine));
            }
            if (minCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCholesterol", minCholesterol));
            }
            if (maxCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCholesterol", maxCholesterol));
            }
            if (minFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFluoride", minFluoride));
            }
            if (maxFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFluoride", maxFluoride));
            }
            if (minSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSaturatedFat", minSaturatedFat));
            }
            if (maxSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSaturatedFat", maxSaturatedFat));
            }
            if (minVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminA", minVitaminA));
            }
            if (maxVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminA", maxVitaminA));
            }
            if (minVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminC", minVitaminC));
            }
            if (maxVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminC", maxVitaminC));
            }
            if (minVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminD", minVitaminD));
            }
            if (maxVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminD", maxVitaminD));
            }
            if (minVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminE", minVitaminE));
            }
            if (maxVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminE", maxVitaminE));
            }
            if (minVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminK", minVitaminK));
            }
            if (maxVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminK", maxVitaminK));
            }
            if (minVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB1", minVitaminB1));
            }
            if (maxVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB1", maxVitaminB1));
            }
            if (minVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB2", minVitaminB2));
            }
            if (maxVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB2", maxVitaminB2));
            }
            if (minVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB5", minVitaminB5));
            }
            if (maxVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB5", maxVitaminB5));
            }
            if (minVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB3", minVitaminB3));
            }
            if (maxVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB3", maxVitaminB3));
            }
            if (minVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB6", minVitaminB6));
            }
            if (maxVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB6", maxVitaminB6));
            }
            if (minVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB12", minVitaminB12));
            }
            if (maxVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB12", maxVitaminB12));
            }
            if (minFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFiber", minFiber));
            }
            if (maxFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFiber", maxFiber));
            }
            if (minFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFolate", minFolate));
            }
            if (maxFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFolate", maxFolate));
            }
            if (minFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFolicAcid", minFolicAcid));
            }
            if (maxFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFolicAcid", maxFolicAcid));
            }
            if (minIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minIodine", minIodine));
            }
            if (maxIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxIodine", maxIodine));
            }
            if (minIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minIron", minIron));
            }
            if (maxIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxIron", maxIron));
            }
            if (minMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minMagnesium", minMagnesium));
            }
            if (maxMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxMagnesium", maxMagnesium));
            }
            if (minManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minManganese", minManganese));
            }
            if (maxManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxManganese", maxManganese));
            }
            if (minPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minPhosphorus", minPhosphorus));
            }
            if (maxPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPhosphorus", maxPhosphorus));
            }
            if (minPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minPotassium", minPotassium));
            }
            if (maxPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPotassium", maxPotassium));
            }
            if (minSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSelenium", minSelenium));
            }
            if (maxSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSelenium", maxSelenium));
            }
            if (minSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSodium", minSodium));
            }
            if (maxSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSodium", maxSodium));
            }
            if (minSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSugar", minSugar));
            }
            if (maxSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSugar", maxSugar));
            }
            if (minZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minZinc", minZinc));
            }
            if (maxZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxZinc", maxZinc));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse200>("/recipes/complexSearch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRecipes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Recipes Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="excludeCuisine">The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="type">The type of recipe. See a full list of supported meal types. (optional)</param>
        /// <param name="instructionsRequired">Whether the recipes must have instructions. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="addRecipeNutrition">If set to true, you get nutritional information about each recipes returned. (optional)</param>
        /// <param name="author">The username of the recipe author. (optional)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="recipeBoxId">The id of the recipe box to which the search should be limited to. (optional)</param>
        /// <param name="titleMatch">Enter text that must be found in the title of the recipes. (optional)</param>
        /// <param name="maxReadyTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> SearchRecipesAsync(string? query = default(string?), string? cuisine = default(string?), string? excludeCuisine = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), string? type = default(string?), bool? instructionsRequired = default(bool?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), bool? addRecipeNutrition = default(bool?), string? author = default(string?), string? tags = default(string?), decimal? recipeBoxId = default(decimal?), string? titleMatch = default(string?), decimal? maxReadyTime = default(decimal?), bool? ignorePantry = default(bool?), string? sort = default(string?), string? sortDirection = default(string?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? limitLicense = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<InlineResponse200> localVarResponse = await SearchRecipesWithHttpInfoAsync(query, cuisine, excludeCuisine, diet, intolerances, equipment, includeIngredients, excludeIngredients, type, instructionsRequired, fillIngredients, addRecipeInformation, addRecipeNutrition, author, tags, recipeBoxId, titleMatch, maxReadyTime, ignorePantry, sort, sortDirection, minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, limitLicense, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Recipes Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The (natural language) search query. (optional)</param>
        /// <param name="cuisine">The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="excludeCuisine">The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)</param>
        /// <param name="diet">The diet for which the recipes must be suitable. See a full list of supported diets. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="type">The type of recipe. See a full list of supported meal types. (optional)</param>
        /// <param name="instructionsRequired">Whether the recipes must have instructions. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="addRecipeNutrition">If set to true, you get nutritional information about each recipes returned. (optional)</param>
        /// <param name="author">The username of the recipe author. (optional)</param>
        /// <param name="tags">The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)</param>
        /// <param name="recipeBoxId">The id of the recipe box to which the search should be limited to. (optional)</param>
        /// <param name="titleMatch">Enter text that must be found in the title of the recipes. (optional)</param>
        /// <param name="maxReadyTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="sort">The strategy to sort recipes by. See a full list of supported sorting options. (optional)</param>
        /// <param name="sortDirection">The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<InlineResponse200>> SearchRecipesWithHttpInfoAsync(string? query = default(string?), string? cuisine = default(string?), string? excludeCuisine = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), string? type = default(string?), bool? instructionsRequired = default(bool?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), bool? addRecipeNutrition = default(bool?), string? author = default(string?), string? tags = default(string?), decimal? recipeBoxId = default(decimal?), string? titleMatch = default(string?), decimal? maxReadyTime = default(decimal?), bool? ignorePantry = default(bool?), string? sort = default(string?), string? sortDirection = default(string?), decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? limitLicense = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (cuisine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "cuisine", cuisine));
            }
            if (excludeCuisine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "excludeCuisine", excludeCuisine));
            }
            if (diet != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "diet", diet));
            }
            if (intolerances != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "intolerances", intolerances));
            }
            if (equipment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "equipment", equipment));
            }
            if (includeIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "includeIngredients", includeIngredients));
            }
            if (excludeIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "excludeIngredients", excludeIngredients));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (instructionsRequired != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "instructionsRequired", instructionsRequired));
            }
            if (fillIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "fillIngredients", fillIngredients));
            }
            if (addRecipeInformation != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "addRecipeInformation", addRecipeInformation));
            }
            if (addRecipeNutrition != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "addRecipeNutrition", addRecipeNutrition));
            }
            if (author != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "author", author));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (recipeBoxId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "recipeBoxId", recipeBoxId));
            }
            if (titleMatch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "titleMatch", titleMatch));
            }
            if (maxReadyTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxReadyTime", maxReadyTime));
            }
            if (ignorePantry != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ignorePantry", ignorePantry));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "sortDirection", sortDirection));
            }
            if (minCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCarbs", minCarbs));
            }
            if (maxCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCarbs", maxCarbs));
            }
            if (minProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minProtein", minProtein));
            }
            if (maxProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxProtein", maxProtein));
            }
            if (minCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalories", minCalories));
            }
            if (maxCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalories", maxCalories));
            }
            if (minFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFat", minFat));
            }
            if (maxFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFat", maxFat));
            }
            if (minAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minAlcohol", minAlcohol));
            }
            if (maxAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxAlcohol", maxAlcohol));
            }
            if (minCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCaffeine", minCaffeine));
            }
            if (maxCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCaffeine", maxCaffeine));
            }
            if (minCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCopper", minCopper));
            }
            if (maxCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCopper", maxCopper));
            }
            if (minCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalcium", minCalcium));
            }
            if (maxCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalcium", maxCalcium));
            }
            if (minCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCholine", minCholine));
            }
            if (maxCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCholine", maxCholine));
            }
            if (minCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCholesterol", minCholesterol));
            }
            if (maxCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCholesterol", maxCholesterol));
            }
            if (minFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFluoride", minFluoride));
            }
            if (maxFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFluoride", maxFluoride));
            }
            if (minSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSaturatedFat", minSaturatedFat));
            }
            if (maxSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSaturatedFat", maxSaturatedFat));
            }
            if (minVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminA", minVitaminA));
            }
            if (maxVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminA", maxVitaminA));
            }
            if (minVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminC", minVitaminC));
            }
            if (maxVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminC", maxVitaminC));
            }
            if (minVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminD", minVitaminD));
            }
            if (maxVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminD", maxVitaminD));
            }
            if (minVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminE", minVitaminE));
            }
            if (maxVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminE", maxVitaminE));
            }
            if (minVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminK", minVitaminK));
            }
            if (maxVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminK", maxVitaminK));
            }
            if (minVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB1", minVitaminB1));
            }
            if (maxVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB1", maxVitaminB1));
            }
            if (minVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB2", minVitaminB2));
            }
            if (maxVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB2", maxVitaminB2));
            }
            if (minVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB5", minVitaminB5));
            }
            if (maxVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB5", maxVitaminB5));
            }
            if (minVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB3", minVitaminB3));
            }
            if (maxVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB3", maxVitaminB3));
            }
            if (minVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB6", minVitaminB6));
            }
            if (maxVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB6", maxVitaminB6));
            }
            if (minVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB12", minVitaminB12));
            }
            if (maxVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB12", maxVitaminB12));
            }
            if (minFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFiber", minFiber));
            }
            if (maxFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFiber", maxFiber));
            }
            if (minFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFolate", minFolate));
            }
            if (maxFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFolate", maxFolate));
            }
            if (minFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFolicAcid", minFolicAcid));
            }
            if (maxFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFolicAcid", maxFolicAcid));
            }
            if (minIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minIodine", minIodine));
            }
            if (maxIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxIodine", maxIodine));
            }
            if (minIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minIron", minIron));
            }
            if (maxIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxIron", maxIron));
            }
            if (minMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minMagnesium", minMagnesium));
            }
            if (maxMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxMagnesium", maxMagnesium));
            }
            if (minManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minManganese", minManganese));
            }
            if (maxManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxManganese", maxManganese));
            }
            if (minPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minPhosphorus", minPhosphorus));
            }
            if (maxPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPhosphorus", maxPhosphorus));
            }
            if (minPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minPotassium", minPotassium));
            }
            if (maxPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPotassium", maxPotassium));
            }
            if (minSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSelenium", minSelenium));
            }
            if (maxSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSelenium", maxSelenium));
            }
            if (minSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSodium", minSodium));
            }
            if (maxSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSodium", maxSodium));
            }
            if (minSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSugar", minSugar));
            }
            if (maxSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSugar", maxSugar));
            }
            if (minZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minZinc", minZinc));
            }
            if (maxZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxZinc", maxZinc));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse200>("/recipes/complexSearch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRecipes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Recipes by Ingredients  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="ranking">Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <returns>List&lt;InlineResponse2001&gt;</returns>
        public List<InlineResponse2001> SearchRecipesByIngredients(string? ingredients = default(string?), int? number = default(int?), bool? limitLicense = default(bool?), decimal? ranking = default(decimal?), bool? ignorePantry = default(bool?))
        {
            Spoonacular.Client.ApiResponse<List<InlineResponse2001>> localVarResponse = SearchRecipesByIngredientsWithHttpInfo(ingredients, number, limitLicense, ranking, ignorePantry);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Recipes by Ingredients  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="ranking">Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2001&gt;</returns>
        public Spoonacular.Client.ApiResponse<List<InlineResponse2001>> SearchRecipesByIngredientsWithHttpInfo(string? ingredients = default(string?), int? number = default(int?), bool? limitLicense = default(bool?), decimal? ranking = default(decimal?), bool? ignorePantry = default(bool?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ingredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ingredients", ingredients));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }
            if (ranking != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ranking", ranking));
            }
            if (ignorePantry != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ignorePantry", ignorePantry));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<InlineResponse2001>>("/recipes/findByIngredients", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRecipesByIngredients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Recipes by Ingredients  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="ranking">Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InlineResponse2001&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2001>> SearchRecipesByIngredientsAsync(string? ingredients = default(string?), int? number = default(int?), bool? limitLicense = default(bool?), decimal? ranking = default(decimal?), bool? ignorePantry = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<List<InlineResponse2001>> localVarResponse = await SearchRecipesByIngredientsWithHttpInfoAsync(ingredients, number, limitLicense, ranking, ignorePantry, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Recipes by Ingredients  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of ingredients that the recipes should contain. (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="ranking">Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)</param>
        /// <param name="ignorePantry">Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2001&gt;)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<List<InlineResponse2001>>> SearchRecipesByIngredientsWithHttpInfoAsync(string? ingredients = default(string?), int? number = default(int?), bool? limitLicense = default(bool?), decimal? ranking = default(decimal?), bool? ignorePantry = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ingredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ingredients", ingredients));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }
            if (ranking != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ranking", ranking));
            }
            if (ignorePantry != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "ignorePantry", ignorePantry));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<InlineResponse2001>>("/recipes/findByIngredients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRecipesByIngredients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Recipes by Nutrients Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="random">If true, every request will give you a random set of recipes within the requested limits. (optional)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <returns>List&lt;InlineResponse2002&gt;</returns>
        public List<InlineResponse2002> SearchRecipesByNutrients(decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? random = default(bool?), bool? limitLicense = default(bool?))
        {
            Spoonacular.Client.ApiResponse<List<InlineResponse2002>> localVarResponse = SearchRecipesByNutrientsWithHttpInfo(minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, random, limitLicense);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Recipes by Nutrients Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="random">If true, every request will give you a random set of recipes within the requested limits. (optional)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2002&gt;</returns>
        public Spoonacular.Client.ApiResponse<List<InlineResponse2002>> SearchRecipesByNutrientsWithHttpInfo(decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? random = default(bool?), bool? limitLicense = default(bool?))
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (minCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCarbs", minCarbs));
            }
            if (maxCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCarbs", maxCarbs));
            }
            if (minProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minProtein", minProtein));
            }
            if (maxProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxProtein", maxProtein));
            }
            if (minCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalories", minCalories));
            }
            if (maxCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalories", maxCalories));
            }
            if (minFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFat", minFat));
            }
            if (maxFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFat", maxFat));
            }
            if (minAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minAlcohol", minAlcohol));
            }
            if (maxAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxAlcohol", maxAlcohol));
            }
            if (minCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCaffeine", minCaffeine));
            }
            if (maxCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCaffeine", maxCaffeine));
            }
            if (minCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCopper", minCopper));
            }
            if (maxCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCopper", maxCopper));
            }
            if (minCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalcium", minCalcium));
            }
            if (maxCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalcium", maxCalcium));
            }
            if (minCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCholine", minCholine));
            }
            if (maxCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCholine", maxCholine));
            }
            if (minCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCholesterol", minCholesterol));
            }
            if (maxCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCholesterol", maxCholesterol));
            }
            if (minFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFluoride", minFluoride));
            }
            if (maxFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFluoride", maxFluoride));
            }
            if (minSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSaturatedFat", minSaturatedFat));
            }
            if (maxSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSaturatedFat", maxSaturatedFat));
            }
            if (minVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminA", minVitaminA));
            }
            if (maxVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminA", maxVitaminA));
            }
            if (minVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminC", minVitaminC));
            }
            if (maxVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminC", maxVitaminC));
            }
            if (minVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminD", minVitaminD));
            }
            if (maxVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminD", maxVitaminD));
            }
            if (minVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminE", minVitaminE));
            }
            if (maxVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminE", maxVitaminE));
            }
            if (minVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminK", minVitaminK));
            }
            if (maxVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminK", maxVitaminK));
            }
            if (minVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB1", minVitaminB1));
            }
            if (maxVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB1", maxVitaminB1));
            }
            if (minVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB2", minVitaminB2));
            }
            if (maxVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB2", maxVitaminB2));
            }
            if (minVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB5", minVitaminB5));
            }
            if (maxVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB5", maxVitaminB5));
            }
            if (minVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB3", minVitaminB3));
            }
            if (maxVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB3", maxVitaminB3));
            }
            if (minVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB6", minVitaminB6));
            }
            if (maxVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB6", maxVitaminB6));
            }
            if (minVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB12", minVitaminB12));
            }
            if (maxVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB12", maxVitaminB12));
            }
            if (minFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFiber", minFiber));
            }
            if (maxFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFiber", maxFiber));
            }
            if (minFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFolate", minFolate));
            }
            if (maxFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFolate", maxFolate));
            }
            if (minFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFolicAcid", minFolicAcid));
            }
            if (maxFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFolicAcid", maxFolicAcid));
            }
            if (minIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minIodine", minIodine));
            }
            if (maxIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxIodine", maxIodine));
            }
            if (minIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minIron", minIron));
            }
            if (maxIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxIron", maxIron));
            }
            if (minMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minMagnesium", minMagnesium));
            }
            if (maxMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxMagnesium", maxMagnesium));
            }
            if (minManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minManganese", minManganese));
            }
            if (maxManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxManganese", maxManganese));
            }
            if (minPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minPhosphorus", minPhosphorus));
            }
            if (maxPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPhosphorus", maxPhosphorus));
            }
            if (minPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minPotassium", minPotassium));
            }
            if (maxPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPotassium", maxPotassium));
            }
            if (minSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSelenium", minSelenium));
            }
            if (maxSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSelenium", maxSelenium));
            }
            if (minSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSodium", minSodium));
            }
            if (maxSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSodium", maxSodium));
            }
            if (minSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSugar", minSugar));
            }
            if (maxSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSugar", maxSugar));
            }
            if (minZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minZinc", minZinc));
            }
            if (maxZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxZinc", maxZinc));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (random != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "random", random));
            }
            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<InlineResponse2002>>("/recipes/findByNutrients", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRecipesByNutrients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Recipes by Nutrients Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="random">If true, every request will give you a random set of recipes within the requested limits. (optional)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InlineResponse2002&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2002>> SearchRecipesByNutrientsAsync(decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? random = default(bool?), bool? limitLicense = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<List<InlineResponse2002>> localVarResponse = await SearchRecipesByNutrientsWithHttpInfoAsync(minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, random, limitLicense, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Recipes by Nutrients Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have. (optional)</param>
        /// <param name="offset">The number of results to skip (between 0 and 900). (optional)</param>
        /// <param name="number">The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)</param>
        /// <param name="random">If true, every request will give you a random set of recipes within the requested limits. (optional)</param>
        /// <param name="limitLicense">Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2002&gt;)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<List<InlineResponse2002>>> SearchRecipesByNutrientsWithHttpInfoAsync(decimal? minCarbs = default(decimal?), decimal? maxCarbs = default(decimal?), decimal? minProtein = default(decimal?), decimal? maxProtein = default(decimal?), decimal? minCalories = default(decimal?), decimal? maxCalories = default(decimal?), decimal? minFat = default(decimal?), decimal? maxFat = default(decimal?), decimal? minAlcohol = default(decimal?), decimal? maxAlcohol = default(decimal?), decimal? minCaffeine = default(decimal?), decimal? maxCaffeine = default(decimal?), decimal? minCopper = default(decimal?), decimal? maxCopper = default(decimal?), decimal? minCalcium = default(decimal?), decimal? maxCalcium = default(decimal?), decimal? minCholine = default(decimal?), decimal? maxCholine = default(decimal?), decimal? minCholesterol = default(decimal?), decimal? maxCholesterol = default(decimal?), decimal? minFluoride = default(decimal?), decimal? maxFluoride = default(decimal?), decimal? minSaturatedFat = default(decimal?), decimal? maxSaturatedFat = default(decimal?), decimal? minVitaminA = default(decimal?), decimal? maxVitaminA = default(decimal?), decimal? minVitaminC = default(decimal?), decimal? maxVitaminC = default(decimal?), decimal? minVitaminD = default(decimal?), decimal? maxVitaminD = default(decimal?), decimal? minVitaminE = default(decimal?), decimal? maxVitaminE = default(decimal?), decimal? minVitaminK = default(decimal?), decimal? maxVitaminK = default(decimal?), decimal? minVitaminB1 = default(decimal?), decimal? maxVitaminB1 = default(decimal?), decimal? minVitaminB2 = default(decimal?), decimal? maxVitaminB2 = default(decimal?), decimal? minVitaminB5 = default(decimal?), decimal? maxVitaminB5 = default(decimal?), decimal? minVitaminB3 = default(decimal?), decimal? maxVitaminB3 = default(decimal?), decimal? minVitaminB6 = default(decimal?), decimal? maxVitaminB6 = default(decimal?), decimal? minVitaminB12 = default(decimal?), decimal? maxVitaminB12 = default(decimal?), decimal? minFiber = default(decimal?), decimal? maxFiber = default(decimal?), decimal? minFolate = default(decimal?), decimal? maxFolate = default(decimal?), decimal? minFolicAcid = default(decimal?), decimal? maxFolicAcid = default(decimal?), decimal? minIodine = default(decimal?), decimal? maxIodine = default(decimal?), decimal? minIron = default(decimal?), decimal? maxIron = default(decimal?), decimal? minMagnesium = default(decimal?), decimal? maxMagnesium = default(decimal?), decimal? minManganese = default(decimal?), decimal? maxManganese = default(decimal?), decimal? minPhosphorus = default(decimal?), decimal? maxPhosphorus = default(decimal?), decimal? minPotassium = default(decimal?), decimal? maxPotassium = default(decimal?), decimal? minSelenium = default(decimal?), decimal? maxSelenium = default(decimal?), decimal? minSodium = default(decimal?), decimal? maxSodium = default(decimal?), decimal? minSugar = default(decimal?), decimal? maxSugar = default(decimal?), decimal? minZinc = default(decimal?), decimal? maxZinc = default(decimal?), int? offset = default(int?), int? number = default(int?), bool? random = default(bool?), bool? limitLicense = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (minCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCarbs", minCarbs));
            }
            if (maxCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCarbs", maxCarbs));
            }
            if (minProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minProtein", minProtein));
            }
            if (maxProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxProtein", maxProtein));
            }
            if (minCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalories", minCalories));
            }
            if (maxCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalories", maxCalories));
            }
            if (minFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFat", minFat));
            }
            if (maxFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFat", maxFat));
            }
            if (minAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minAlcohol", minAlcohol));
            }
            if (maxAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxAlcohol", maxAlcohol));
            }
            if (minCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCaffeine", minCaffeine));
            }
            if (maxCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCaffeine", maxCaffeine));
            }
            if (minCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCopper", minCopper));
            }
            if (maxCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCopper", maxCopper));
            }
            if (minCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCalcium", minCalcium));
            }
            if (maxCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCalcium", maxCalcium));
            }
            if (minCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCholine", minCholine));
            }
            if (maxCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCholine", maxCholine));
            }
            if (minCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minCholesterol", minCholesterol));
            }
            if (maxCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxCholesterol", maxCholesterol));
            }
            if (minFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFluoride", minFluoride));
            }
            if (maxFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFluoride", maxFluoride));
            }
            if (minSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSaturatedFat", minSaturatedFat));
            }
            if (maxSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSaturatedFat", maxSaturatedFat));
            }
            if (minVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminA", minVitaminA));
            }
            if (maxVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminA", maxVitaminA));
            }
            if (minVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminC", minVitaminC));
            }
            if (maxVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminC", maxVitaminC));
            }
            if (minVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminD", minVitaminD));
            }
            if (maxVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminD", maxVitaminD));
            }
            if (minVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminE", minVitaminE));
            }
            if (maxVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminE", maxVitaminE));
            }
            if (minVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminK", minVitaminK));
            }
            if (maxVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminK", maxVitaminK));
            }
            if (minVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB1", minVitaminB1));
            }
            if (maxVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB1", maxVitaminB1));
            }
            if (minVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB2", minVitaminB2));
            }
            if (maxVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB2", maxVitaminB2));
            }
            if (minVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB5", minVitaminB5));
            }
            if (maxVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB5", maxVitaminB5));
            }
            if (minVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB3", minVitaminB3));
            }
            if (maxVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB3", maxVitaminB3));
            }
            if (minVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB6", minVitaminB6));
            }
            if (maxVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB6", maxVitaminB6));
            }
            if (minVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minVitaminB12", minVitaminB12));
            }
            if (maxVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxVitaminB12", maxVitaminB12));
            }
            if (minFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFiber", minFiber));
            }
            if (maxFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFiber", maxFiber));
            }
            if (minFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFolate", minFolate));
            }
            if (maxFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFolate", maxFolate));
            }
            if (minFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minFolicAcid", minFolicAcid));
            }
            if (maxFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxFolicAcid", maxFolicAcid));
            }
            if (minIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minIodine", minIodine));
            }
            if (maxIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxIodine", maxIodine));
            }
            if (minIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minIron", minIron));
            }
            if (maxIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxIron", maxIron));
            }
            if (minMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minMagnesium", minMagnesium));
            }
            if (maxMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxMagnesium", maxMagnesium));
            }
            if (minManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minManganese", minManganese));
            }
            if (maxManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxManganese", maxManganese));
            }
            if (minPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minPhosphorus", minPhosphorus));
            }
            if (maxPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPhosphorus", maxPhosphorus));
            }
            if (minPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minPotassium", minPotassium));
            }
            if (maxPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxPotassium", maxPotassium));
            }
            if (minSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSelenium", minSelenium));
            }
            if (maxSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSelenium", maxSelenium));
            }
            if (minSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSodium", minSodium));
            }
            if (maxSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSodium", maxSodium));
            }
            if (minSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minSugar", minSugar));
            }
            if (maxSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxSugar", maxSugar));
            }
            if (minZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "minZinc", minZinc));
            }
            if (maxZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "maxZinc", maxZinc));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }
            if (random != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "random", random));
            }
            if (limitLicense != null)
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "limitLicense", limitLicense));
            }

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<InlineResponse2002>>("/recipes/findByNutrients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRecipesByNutrients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summarize Recipe Automatically generate a short description that summarizes key information about the recipe.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 SummarizeRecipe(int id)
        {
            Spoonacular.Client.ApiResponse<InlineResponse2005> localVarResponse = SummarizeRecipeWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Summarize Recipe Automatically generate a short description that summarizes key information about the recipe.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public Spoonacular.Client.ApiResponse<InlineResponse2005> SummarizeRecipeWithHttpInfo(int id)
        {
            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2005>("/recipes/{id}/summary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summarize Recipe Automatically generate a short description that summarizes key information about the recipe.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> SummarizeRecipeAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Spoonacular.Client.ApiResponse<InlineResponse2005> localVarResponse = await SummarizeRecipeWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Summarize Recipe Automatically generate a short description that summarizes key information about the recipe.
        /// </summary>
        /// <exception cref="Spoonacular.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The item&#39;s id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<Spoonacular.Client.ApiResponse<InlineResponse2005>> SummarizeRecipeWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Spoonacular.Client.RequestOptions localVarRequestOptions = new Spoonacular.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Spoonacular.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Spoonacular.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Spoonacular.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (apiKeyScheme) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.QueryParameters.Add(Spoonacular.Client.ClientUtils.ParameterToMultiMap("", "apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2005>("/recipes/{id}/summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeRecipe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
