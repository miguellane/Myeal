// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Myeal.Data;

#nullable disable

namespace Myeal.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220621224637_RecipeSearchModel")]
    partial class RecipeSearchModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Myeal.Models.AnalyzedInstruction", b =>
                {
                    b.Property<int>("AnalyzedInstructionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnalyzedInstructionID"), 1L, 1);

                    b.Property<int>("SpoonacularSearchViewModelID")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnalyzedInstructionID");

                    b.HasIndex("SpoonacularSearchViewModelID");

                    b.ToTable("AnalyzedInstruction");
                });

            modelBuilder.Entity("Myeal.Models.Auth0_Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Auth0_Account");
                });

            modelBuilder.Entity("Myeal.Models.CaloricBreakdown", b =>
                {
                    b.Property<int>("CaloricBreakdownID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaloricBreakdownID"), 1L, 1);

                    b.Property<int>("NutritionID")
                        .HasColumnType("int");

                    b.Property<double>("percentCarbs")
                        .HasColumnType("float");

                    b.Property<double>("percentFat")
                        .HasColumnType("float");

                    b.Property<double>("percentProtein")
                        .HasColumnType("float");

                    b.HasKey("CaloricBreakdownID");

                    b.HasIndex("NutritionID")
                        .IsUnique();

                    b.ToTable("CaloricBreakdown");
                });

            modelBuilder.Entity("Myeal.Models.Equipment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("StepID")
                        .HasColumnType("int");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("localizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("StepID");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("Myeal.Models.Flavonoid", b =>
                {
                    b.Property<int>("FlavonoidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlavonoidID"), 1L, 1);

                    b.Property<int>("NutritionID")
                        .HasColumnType("int");

                    b.Property<int>("NutrutionID")
                        .HasColumnType("int");

                    b.Property<double>("amount")
                        .HasColumnType("float");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlavonoidID");

                    b.HasIndex("NutritionID");

                    b.ToTable("Flavonoid");
                });

            modelBuilder.Entity("Myeal.Models.Ingredient", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("NutritionID")
                        .HasColumnType("int");

                    b.Property<int?>("StepID")
                        .HasColumnType("int");

                    b.Property<double>("amount")
                        .HasColumnType("float");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("localizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("NutritionID");

                    b.HasIndex("StepID");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("Myeal.Models.Length", b =>
                {
                    b.Property<int>("LengthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LengthId"), 1L, 1);

                    b.Property<int>("StepId")
                        .HasColumnType("int");

                    b.Property<int>("number")
                        .HasColumnType("int");

                    b.Property<string>("unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LengthId");

                    b.HasIndex("StepId")
                        .IsUnique();

                    b.ToTable("Length");
                });

            modelBuilder.Entity("Myeal.Models.Nutrient", b =>
                {
                    b.Property<int>("NutrientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NutrientID"), 1L, 1);

                    b.Property<int?>("Ingredientid")
                        .HasColumnType("int");

                    b.Property<int>("NutritionID")
                        .HasColumnType("int");

                    b.Property<double>("amount")
                        .HasColumnType("float");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("percentOfDailyNeeds")
                        .HasColumnType("float");

                    b.Property<string>("unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NutrientID");

                    b.HasIndex("Ingredientid");

                    b.HasIndex("NutritionID");

                    b.ToTable("Nutrient");
                });

            modelBuilder.Entity("Myeal.Models.Nutrition", b =>
                {
                    b.Property<int>("NutritionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NutritionID"), 1L, 1);

                    b.Property<int>("SpoonacularSearchViewModelID")
                        .HasColumnType("int");

                    b.HasKey("NutritionID");

                    b.HasIndex("SpoonacularSearchViewModelID")
                        .IsUnique();

                    b.ToTable("Nutrition");
                });

            modelBuilder.Entity("Myeal.Models.Property", b =>
                {
                    b.Property<int>("PropertyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyID"), 1L, 1);

                    b.Property<int>("NutritionID")
                        .HasColumnType("int");

                    b.Property<double>("amount")
                        .HasColumnType("float");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropertyID");

                    b.HasIndex("NutritionID");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("Myeal.Models.SpoonacularSearchViewModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("aggregateLikes")
                        .HasColumnType("int");

                    b.Property<bool>("cheap")
                        .HasColumnType("bit");

                    b.Property<int>("cookingMinutes")
                        .HasColumnType("int");

                    b.Property<string>("creditsText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("dairyFree")
                        .HasColumnType("bit");

                    b.Property<string>("gaps")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("glutenFree")
                        .HasColumnType("bit");

                    b.Property<int>("healthScore")
                        .HasColumnType("int");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("license")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("lowFodmap")
                        .HasColumnType("bit");

                    b.Property<int>("openLicense")
                        .HasColumnType("int");

                    b.Property<int>("preparationMinutes")
                        .HasColumnType("int");

                    b.Property<double>("pricePerServing")
                        .HasColumnType("float");

                    b.Property<int>("readyInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("servings")
                        .HasColumnType("int");

                    b.Property<string>("sourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sourceUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("spoonacularSourceUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("sustainable")
                        .HasColumnType("bit");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("vegan")
                        .HasColumnType("bit");

                    b.Property<bool>("vegetarian")
                        .HasColumnType("bit");

                    b.Property<bool>("veryHealthy")
                        .HasColumnType("bit");

                    b.Property<bool>("veryPopular")
                        .HasColumnType("bit");

                    b.Property<int>("weightWatcherSmartPoints")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("SpoonacularSearchViewModel");
                });

            modelBuilder.Entity("Myeal.Models.Step", b =>
                {
                    b.Property<int>("StepID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StepID"), 1L, 1);

                    b.Property<int>("AnalyzedInstructionID")
                        .HasColumnType("int");

                    b.Property<int>("number")
                        .HasColumnType("int");

                    b.Property<string>("step")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StepID");

                    b.HasIndex("AnalyzedInstructionID");

                    b.ToTable("Step");
                });

            modelBuilder.Entity("Myeal.Models.Temperature", b =>
                {
                    b.Property<int>("TemperatureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemperatureID"), 1L, 1);

                    b.Property<int>("EquipmentID")
                        .HasColumnType("int");

                    b.Property<double>("number")
                        .HasColumnType("float");

                    b.Property<string>("unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TemperatureID");

                    b.HasIndex("EquipmentID")
                        .IsUnique();

                    b.ToTable("Temperature");
                });

            modelBuilder.Entity("Myeal.Models.WeightPerServing", b =>
                {
                    b.Property<int>("WeightPerServingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WeightPerServingID"), 1L, 1);

                    b.Property<int>("NutritionID")
                        .HasColumnType("int");

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.Property<string>("unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WeightPerServingID");

                    b.HasIndex("NutritionID")
                        .IsUnique();

                    b.ToTable("WeightPerServing");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Myeal.Models.AnalyzedInstruction", b =>
                {
                    b.HasOne("Myeal.Models.SpoonacularSearchViewModel", "SpoonacularSearchViewModel")
                        .WithMany("analyzedInstructions")
                        .HasForeignKey("SpoonacularSearchViewModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpoonacularSearchViewModel");
                });

            modelBuilder.Entity("Myeal.Models.CaloricBreakdown", b =>
                {
                    b.HasOne("Myeal.Models.Nutrition", "Nutrition")
                        .WithOne("caloricBreakdown")
                        .HasForeignKey("Myeal.Models.CaloricBreakdown", "NutritionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nutrition");
                });

            modelBuilder.Entity("Myeal.Models.Equipment", b =>
                {
                    b.HasOne("Myeal.Models.Step", "Step")
                        .WithMany("equipment")
                        .HasForeignKey("StepID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("Myeal.Models.Flavonoid", b =>
                {
                    b.HasOne("Myeal.Models.Nutrition", "Nutrition")
                        .WithMany("flavonoids")
                        .HasForeignKey("NutritionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nutrition");
                });

            modelBuilder.Entity("Myeal.Models.Ingredient", b =>
                {
                    b.HasOne("Myeal.Models.Nutrition", "Nutrition")
                        .WithMany("ingredients")
                        .HasForeignKey("NutritionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Myeal.Models.Step", null)
                        .WithMany("ingredients")
                        .HasForeignKey("StepID");

                    b.Navigation("Nutrition");
                });

            modelBuilder.Entity("Myeal.Models.Length", b =>
                {
                    b.HasOne("Myeal.Models.Step", "Step")
                        .WithOne("length")
                        .HasForeignKey("Myeal.Models.Length", "StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("Myeal.Models.Nutrient", b =>
                {
                    b.HasOne("Myeal.Models.Ingredient", null)
                        .WithMany("nutrients")
                        .HasForeignKey("Ingredientid");

                    b.HasOne("Myeal.Models.Nutrition", "Nutrition")
                        .WithMany("nutrients")
                        .HasForeignKey("NutritionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nutrition");
                });

            modelBuilder.Entity("Myeal.Models.Nutrition", b =>
                {
                    b.HasOne("Myeal.Models.SpoonacularSearchViewModel", "SpoonacularSearchViewModel")
                        .WithOne("nutrition")
                        .HasForeignKey("Myeal.Models.Nutrition", "SpoonacularSearchViewModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpoonacularSearchViewModel");
                });

            modelBuilder.Entity("Myeal.Models.Property", b =>
                {
                    b.HasOne("Myeal.Models.Nutrition", "Nutrition")
                        .WithMany("properties")
                        .HasForeignKey("NutritionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nutrition");
                });

            modelBuilder.Entity("Myeal.Models.Step", b =>
                {
                    b.HasOne("Myeal.Models.AnalyzedInstruction", "AnalyzedInstruction")
                        .WithMany("steps")
                        .HasForeignKey("AnalyzedInstructionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalyzedInstruction");
                });

            modelBuilder.Entity("Myeal.Models.Temperature", b =>
                {
                    b.HasOne("Myeal.Models.Equipment", "equipment")
                        .WithOne("temperature")
                        .HasForeignKey("Myeal.Models.Temperature", "EquipmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("equipment");
                });

            modelBuilder.Entity("Myeal.Models.WeightPerServing", b =>
                {
                    b.HasOne("Myeal.Models.Nutrition", "Nutrition")
                        .WithOne("weightPerServing")
                        .HasForeignKey("Myeal.Models.WeightPerServing", "NutritionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nutrition");
                });

            modelBuilder.Entity("Myeal.Models.AnalyzedInstruction", b =>
                {
                    b.Navigation("steps");
                });

            modelBuilder.Entity("Myeal.Models.Equipment", b =>
                {
                    b.Navigation("temperature")
                        .IsRequired();
                });

            modelBuilder.Entity("Myeal.Models.Ingredient", b =>
                {
                    b.Navigation("nutrients");
                });

            modelBuilder.Entity("Myeal.Models.Nutrition", b =>
                {
                    b.Navigation("caloricBreakdown")
                        .IsRequired();

                    b.Navigation("flavonoids");

                    b.Navigation("ingredients");

                    b.Navigation("nutrients");

                    b.Navigation("properties");

                    b.Navigation("weightPerServing")
                        .IsRequired();
                });

            modelBuilder.Entity("Myeal.Models.SpoonacularSearchViewModel", b =>
                {
                    b.Navigation("analyzedInstructions");

                    b.Navigation("nutrition")
                        .IsRequired();
                });

            modelBuilder.Entity("Myeal.Models.Step", b =>
                {
                    b.Navigation("equipment");

                    b.Navigation("ingredients");

                    b.Navigation("length")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
