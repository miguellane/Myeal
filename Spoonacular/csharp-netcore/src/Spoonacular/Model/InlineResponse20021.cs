/*
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@spoonacular.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Spoonacular.Client.OpenAPIDateConverter;

namespace Spoonacular.Model
{
    /// <summary>
    /// InlineResponse20021
    /// </summary>
    [DataContract(Name = "inline_response_200_21")]
    public partial class InlineResponse20021 : IEquatable<InlineResponse20021>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20021" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineResponse20021() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20021" /> class.
        /// </summary>
        /// <param name="calories">calories (required).</param>
        /// <param name="carbs">carbs (required).</param>
        /// <param name="fat">fat (required).</param>
        /// <param name="protein">protein (required).</param>
        /// <param name="recipesUsed">recipesUsed (required).</param>
        public InlineResponse20021(InlineResponse20021Calories calories = default(InlineResponse20021Calories), InlineResponse20021Calories carbs = default(InlineResponse20021Calories), InlineResponse20021Calories fat = default(InlineResponse20021Calories), InlineResponse20021Calories protein = default(InlineResponse20021Calories), int recipesUsed = default(int))
        {
            // to ensure "calories" is required (not null)
            if (calories == null)
            {
                throw new ArgumentNullException("calories is a required property for InlineResponse20021 and cannot be null");
            }
            this.Calories = calories;
            // to ensure "carbs" is required (not null)
            if (carbs == null)
            {
                throw new ArgumentNullException("carbs is a required property for InlineResponse20021 and cannot be null");
            }
            this.Carbs = carbs;
            // to ensure "fat" is required (not null)
            if (fat == null)
            {
                throw new ArgumentNullException("fat is a required property for InlineResponse20021 and cannot be null");
            }
            this.Fat = fat;
            // to ensure "protein" is required (not null)
            if (protein == null)
            {
                throw new ArgumentNullException("protein is a required property for InlineResponse20021 and cannot be null");
            }
            this.Protein = protein;
            this.RecipesUsed = recipesUsed;
        }

        /// <summary>
        /// Gets or Sets Calories
        /// </summary>
        [DataMember(Name = "calories", IsRequired = true, EmitDefaultValue = false)]
        public InlineResponse20021Calories Calories { get; set; }

        /// <summary>
        /// Gets or Sets Carbs
        /// </summary>
        [DataMember(Name = "carbs", IsRequired = true, EmitDefaultValue = false)]
        public InlineResponse20021Calories Carbs { get; set; }

        /// <summary>
        /// Gets or Sets Fat
        /// </summary>
        [DataMember(Name = "fat", IsRequired = true, EmitDefaultValue = false)]
        public InlineResponse20021Calories Fat { get; set; }

        /// <summary>
        /// Gets or Sets Protein
        /// </summary>
        [DataMember(Name = "protein", IsRequired = true, EmitDefaultValue = false)]
        public InlineResponse20021Calories Protein { get; set; }

        /// <summary>
        /// Gets or Sets RecipesUsed
        /// </summary>
        [DataMember(Name = "recipesUsed", IsRequired = true, EmitDefaultValue = false)]
        public int RecipesUsed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InlineResponse20021 {\n");
            sb.Append("  Calories: ").Append(Calories).Append("\n");
            sb.Append("  Carbs: ").Append(Carbs).Append("\n");
            sb.Append("  Fat: ").Append(Fat).Append("\n");
            sb.Append("  Protein: ").Append(Protein).Append("\n");
            sb.Append("  RecipesUsed: ").Append(RecipesUsed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20021);
        }

        /// <summary>
        /// Returns true if InlineResponse20021 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20021 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20021 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Calories == input.Calories ||
                    (this.Calories != null &&
                    this.Calories.Equals(input.Calories))
                ) && 
                (
                    this.Carbs == input.Carbs ||
                    (this.Carbs != null &&
                    this.Carbs.Equals(input.Carbs))
                ) && 
                (
                    this.Fat == input.Fat ||
                    (this.Fat != null &&
                    this.Fat.Equals(input.Fat))
                ) && 
                (
                    this.Protein == input.Protein ||
                    (this.Protein != null &&
                    this.Protein.Equals(input.Protein))
                ) && 
                (
                    this.RecipesUsed == input.RecipesUsed ||
                    this.RecipesUsed.Equals(input.RecipesUsed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Calories != null)
                {
                    hashCode = (hashCode * 59) + this.Calories.GetHashCode();
                }
                if (this.Carbs != null)
                {
                    hashCode = (hashCode * 59) + this.Carbs.GetHashCode();
                }
                if (this.Fat != null)
                {
                    hashCode = (hashCode * 59) + this.Fat.GetHashCode();
                }
                if (this.Protein != null)
                {
                    hashCode = (hashCode * 59) + this.Protein.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RecipesUsed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
